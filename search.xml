<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>模拟退火</title>
      <link href="/2019/10/30/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
      <url>/2019/10/30/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/</url>
      
        <content type="html"><![CDATA[<p>南京2018ccpc区域赛：</p><p><a href="https://www.cnblogs.com/zhangbuang/p/11228015.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangbuang/p/11228015.html</a></p><a id="more"></a> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y, z;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(node p,node p1)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((p.x-p1.x)* (p.x - p1.x)+ (p.y - p1.y)* (p.y - p1.y)+ (p.z - p1.z)* (p.z - p1.z));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> T_start = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> rate = <span class="number">0.98</span>;</span><br><span class="line"><span class="keyword">int</span> T=T_start;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; p[i].x &gt;&gt; p[i].y &gt;&gt; p[i].z;</span><br><span class="line">node ans_p = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">while</span> (T &gt; eps) &#123;</span><br><span class="line">node p_max = p[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dis(ans_p, p[i]) &gt; dis(ans_p, p_max))</span><br><span class="line">p_max = p[i];</span><br><span class="line">&#125;</span><br><span class="line">ans = min(ans, dis(ans_p, p_max));</span><br><span class="line">ans_p.x += (p_max.x - ans_p.x) * T / T_start;</span><br><span class="line">ans_p.y += (p_max.y - ans_p.y) * T / T_start;</span><br><span class="line">ans_p.z += (p_max.z - ans_p.z) * T / T_start;</span><br><span class="line">        <span class="comment">//以一定概率向目前最大的那个点走一点点</span></span><br><span class="line">T *= rate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 模拟退火 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>赌徒破产模型</title>
      <link href="/2019/10/18/%E8%B5%8C%E5%BE%92%E7%A0%B4%E4%BA%A7%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/10/18/%E8%B5%8C%E5%BE%92%E7%A0%B4%E4%BA%A7%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://ac.nowcoder.com/acm/problem/14962" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/14962</a></p><p>Alice和Bob赌糖果。规则是这样的：Alice从[ l, r]中随机抽一个数，Bob从[ L, R]中随机抽一个数，谁抽的数大谁就赢，输的一方给另一方1颗糖（平局不用给糖），他们会一直赌下去直到有一方没有糖果为止。Alice有n颗糖果，Bob有m颗糖果，求Alice将Bob的糖果赢完的概率。</p><p>赌徒破产模型：</p><p>详细推理过程:<a href="https://wenku.baidu.com/view/b4de3fc6bceb19e8b8f6ba4d.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/b4de3fc6bceb19e8b8f6ba4d.html</a></p><p>最后结论：</p><p>p(m)为赌徒有m本金（想赢n钱）输光的概率。</p><a id="more"></a><p><img src="https://bigboomclap.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/Screenshot_2019-10-18-10-24-07-692_com.UCMobile.png" alt></p><p>代码：</p><p>代码是按照对推关系算的。</p><p>先假设异常赢得概率为1/2</p><p><img src="https://bigboomclap.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/qq_pic_merged_1571366427538.jpg" alt></p><p><img src="https://bigboomclap.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/qq_pic_merged_1571366450233.jpg" alt></p><p><img src="https://bigboomclap.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/Screenshot_2019-10-18-10-41-05-900_com.UCMobile.png" alt></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">11</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">double</span> val[N];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cal</span><span class="params">(<span class="keyword">double</span> p,<span class="keyword">int</span> n,<span class="keyword">int</span> N)</span></span>&#123; <span class="comment">//模版  p的概率往右移一格，从n走到N 的概率</span></span><br><span class="line">    val[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++)</span><br><span class="line">        val[i]=(val[i<span class="number">-1</span>]-(<span class="number">1.0</span>-p)*val[i<span class="number">-2</span>])/p;</span><br><span class="line">    <span class="keyword">double</span> ans=val[n]/val[N];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,l,r,L,R;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;l&gt;&gt;r;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;L&gt;&gt;R;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=L;j&lt;=R;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;j) a++;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j) b++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> p=(<span class="keyword">double</span>)a/(a+b);</span><br><span class="line">    <span class="keyword">double</span> ans;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(p&gt;<span class="number">0.5</span>) ans=Cal(p,n,m+n);<span class="comment">//第一个人输光的概率大，说明他应会先输光，按他算</span></span><br><span class="line">    <span class="keyword">else</span> ans=<span class="number">1.0</span>-Cal(<span class="number">1</span>-p,m,n+m);  <span class="comment">// 第二个人输光的概率大，说明他应会先输光，按他算</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.5f\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 概率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多边形面积交</title>
      <link href="/2019/10/13/%E5%A4%9A%E8%BE%B9%E5%BD%A2%E9%9D%A2%E7%A7%AF%E4%BA%A4/"/>
      <url>/2019/10/13/%E5%A4%9A%E8%BE%B9%E5%BD%A2%E9%9D%A2%E7%A7%AF%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 510  </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sig</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (d &gt; eps) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> d &lt; -eps ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y; Point() &#123;&#125;</span><br><span class="line">Point(<span class="keyword">double</span> x, <span class="keyword">double</span> y) :x(x), y(y) &#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Point&amp; p)<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sig(x - p.x) == <span class="number">0</span> &amp;&amp; sig(y - p.y) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Point o, Point a, Point b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span>(a.x - o.x) * (b.y - o.y) - (b.x - o.x) * (a.y - o.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(Point* ps, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">ps[n] = ps[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">res += ps[i].x * ps[i + <span class="number">1</span>].y - ps[i].y * ps[i + <span class="number">1</span>].x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res / <span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lineCross</span><span class="params">(Point a, Point b, Point c, Point d, Point&amp; p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> s1, s2;</span><br><span class="line">s1 = cross(a, b, c);</span><br><span class="line">s2 = cross(a, b, d);</span><br><span class="line"><span class="keyword">if</span> (sig(s1) == <span class="number">0</span> &amp;&amp; sig(s2) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (sig(s2 - s1) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">p.x = (c.x * s2 - d.x * s1) / (s2 - s1);</span><br><span class="line">p.y = (c.y * s2 - d.y * s1) / (s2 - s1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多边形切割  </span></span><br><span class="line"><span class="comment">//用直线ab切割多边形p，切割后的在向量(a,b)的左侧，并原地保存切割结果  </span></span><br><span class="line"><span class="comment">//如果退化为一个点，也会返回去,此时n为1  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">polygon_cut</span><span class="params">(Point* p, <span class="keyword">int</span>&amp; n, Point a, Point b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> Point pp[maxn];</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>; p[n] = p[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (sig(cross(a, b, p[i])) &gt; <span class="number">0</span>) pp[m++] = p[i];</span><br><span class="line"><span class="keyword">if</span> (sig(cross(a, b, p[i])) != sig(cross(a, b, p[i + <span class="number">1</span>])))</span><br><span class="line">lineCross(a, b, p[i], p[i + <span class="number">1</span>], pp[m++]);</span><br><span class="line">&#125;</span><br><span class="line">n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="keyword">if</span> (!i || !(pp[i] == pp[i - <span class="number">1</span>]))</span><br><span class="line">p[n++] = pp[i];</span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">1</span> &amp;&amp; p[n - <span class="number">1</span>] == p[<span class="number">0</span>])n--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------华丽的分隔线-----------------//  </span></span><br><span class="line"><span class="comment">//返回三角形oab和三角形ocd的有向交面积,o是原点//  </span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">intersectArea</span><span class="params">(Point a, Point b, Point c, Point d)</span> </span>&#123;</span><br><span class="line"><span class="function">Point <span class="title">o</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> s1 = sig(cross(o, a, b));</span><br><span class="line"><span class="keyword">int</span> s2 = sig(cross(o, c, d));</span><br><span class="line"><span class="keyword">if</span> (s1 == <span class="number">0</span> || s2 == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0.0</span>;<span class="comment">//退化，面积为0  </span></span><br><span class="line"><span class="keyword">if</span> (s1 == <span class="number">-1</span>) swap(a, b);</span><br><span class="line"><span class="keyword">if</span> (s2 == <span class="number">-1</span>) swap(c, d);</span><br><span class="line">Point p[<span class="number">10</span>] = &#123; o,a,b &#125;;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line">polygon_cut(p, n, o, c);</span><br><span class="line">polygon_cut(p, n, c, d);</span><br><span class="line">polygon_cut(p, n, d, o);</span><br><span class="line"><span class="keyword">double</span> res = <span class="built_in">fabs</span>(area(p, n));</span><br><span class="line"><span class="keyword">if</span> (s1 * s2 == <span class="number">-1</span>) res = -res; <span class="keyword">return</span> res*<span class="number">1.00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求两多边形的交面积  </span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">intersectArea</span><span class="params">(Point* ps1, <span class="keyword">int</span> n1, Point* ps2, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (area(ps1, n1) &lt; <span class="number">0</span>) reverse(ps1, ps1 + n1);</span><br><span class="line"><span class="keyword">if</span> (area(ps2, n2) &lt; <span class="number">0</span>) reverse(ps2, ps2 + n2);</span><br><span class="line">ps1[n1] = ps1[<span class="number">0</span>];</span><br><span class="line">ps2[n2] = ps2[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n2; j++) &#123;</span><br><span class="line">res += intersectArea(ps1[i], ps1[i + <span class="number">1</span>], ps2[j], ps2[j + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res * <span class="number">1.00</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//n1=3,n2=4此处是三角形和矩形的交</span></span><br><span class="line">Point ps1[maxn], ps2[maxn];</span><br><span class="line"><span class="keyword">int</span> n1, n2;<span class="comment">//几边形</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">18</span>);</span><br><span class="line">n1 = <span class="number">3</span>, n2 = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">double</span> a, b, c, d, e, f, g, h;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e &gt;&gt; f &gt;&gt; g &gt;&gt; h) &#123;</span><br><span class="line">ps1[<span class="number">0</span>].x = a, ps1[<span class="number">0</span>].y = b,</span><br><span class="line">ps1[<span class="number">1</span>].x = c, ps1[<span class="number">1</span>].y= b,</span><br><span class="line">ps1[<span class="number">2</span>].x = a, ps1[<span class="number">2</span>].y = d;</span><br><span class="line">ps2[<span class="number">0</span>].x = e, ps2[<span class="number">0</span>].y = f,</span><br><span class="line">ps2[<span class="number">1</span>].x = g, ps2[<span class="number">1</span>].y = f,</span><br><span class="line">ps2[<span class="number">2</span>].x = g, ps2[<span class="number">2</span>].y = h,</span><br><span class="line">ps2[<span class="number">3</span>].x = e, ps2[<span class="number">3</span>].y = h;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">abs</span>(intersectArea(ps1, n1, ps2, n2)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Computing Geometry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2019/10/13/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/10/13/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>归并排序:速度仅次于<a href="https://baike.baidu.com/item/快速排序" target="_blank" rel="noopener">快速排序</a>，为稳定排序算法，一般用于对总体无序，但是各子项相对有序的<a href="https://baike.baidu.com/item/数列" target="_blank" rel="noopener">数列</a></p><p>函数参数：merge(first1,last1,first2,last2,result,compare);</p><p>firs1t为第一个容器的首迭代器，last1为第一个容器的末迭代器；</p><p>first2为第二个容器的首迭代器，last2为容器的末迭代器；</p><p>result为存放结果的容器，comapre为比较函数（可略写，默认为合并为一个升序序列）。</p><p><a href="https://www.luogu.org/problem/P1309#submit" target="_blank" rel="noopener">https://www.luogu.org/problem/P1309#submit</a></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, r, q;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, num;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node&amp; t)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t.x != x)<span class="keyword">return</span> x &gt; t.x;</span><br><span class="line"><span class="keyword">return</span> num &lt; t.num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;people[maxn],loser[maxn],winner[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> node a, <span class="keyword">const</span> node b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.x == b.x) <span class="keyword">return</span> a.num &lt; b.num;</span><br><span class="line"><span class="keyword">return</span> a.x &gt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++) <span class="built_in">cin</span> &gt;&gt; people[i].x, people[i].num = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++) <span class="built_in">cin</span> &gt;&gt; people[i].y;</span><br><span class="line">sort(people + <span class="number">1</span>, people + <span class="number">1</span> + <span class="number">2</span> * n, cmp);</span><br><span class="line"><span class="keyword">while</span> (r--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (people[<span class="number">2</span> * i - <span class="number">1</span>].y &gt; people[<span class="number">2</span> * i].y) &#123;</span><br><span class="line">people[<span class="number">2</span> * i - <span class="number">1</span>].x++;</span><br><span class="line">loser[i] = people[<span class="number">2</span> * i], winner[i] = people[<span class="number">2</span> * i - <span class="number">1</span>];</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">people[<span class="number">2</span> * i].x++;</span><br><span class="line">loser[i] = people[<span class="number">2</span> * i - <span class="number">1</span>], winner[i] = people[<span class="number">2</span> * i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">merge(loser + <span class="number">1</span>, loser + <span class="number">1</span> + n, winner + <span class="number">1</span>, winner + <span class="number">1</span> + n, people + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">sort(people + <span class="number">1</span>, people + <span class="number">1</span> + <span class="number">2</span> * n, cmp);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; people[q].num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2 4 3</span></span><br><span class="line"><span class="comment">107 106 106 107</span></span><br><span class="line"><span class="comment">100 50 200 150</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>极角排序</title>
      <link href="/2019/10/13/%E6%9E%81%E8%A7%92%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/10/13/%E6%9E%81%E8%A7%92%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>方法1：利用atan2（）函数按极角从小到大排序。</p><p>　　关于atan2()函数：在C语言的math.h或C++中的cmath中有两个求反正切的函数atan(double x)与atan2(double y,double x)  他们返回的值是弧度要转化为角度再自己处理下。</p><p>前者接受的是一个正切值（直线的斜率）得到夹角，但是由于正切的规律性本可以有两个角度的但它却只返回一个，因为atan的值域是从-90~90 也就是它只处理一四象限，所以一般不用它。</p><p>第二个atan2(double y,double x) 其中y代表已知点的Y坐标，同理x ,返回值是此点与远点连线与x轴正方向的夹角，这样它就可以处理四个象限的任意情况了，它的值域相应的也就是-180~180了</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(point a,point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">atan2</span>(a.y,a.x)!=<span class="built_in">atan2</span>(b.y,b.x))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">atan2</span>(a.y,a.x)&lt;<span class="built_in">atan2</span>(b.y,b.x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：利用叉积按极角从小到大排序。</p><p>　　关于叉积：叉积=0是指两向量平行（重合）；叉积&gt;0，则向量a在向量b的顺时针方向（粗略的理解为在a在b的下方）；叉积&lt;0，则向量a在向量b的逆时针方向（粗略的理解为在a在b的上方）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(point a,point b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    point c;<span class="comment">//原点</span></span><br><span class="line">    c.x = <span class="number">0</span>;</span><br><span class="line">    c.y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(compare(c,a,b)==<span class="number">0</span>)<span class="comment">//计算叉积，函数在上面有介绍，如果叉积相等，按照X从小到大排序</span></span><br><span class="line">        <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> compare(c,a,b)&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法3：先按象限从小到大排序 再按极角从小到大排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quadrant</span><span class="params">(point a)</span>　　<span class="comment">//象限排序，注意包含四个坐标轴</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x&gt;<span class="number">0</span>&amp;&amp;a.y&gt;=<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a.x&lt;=<span class="number">0</span>&amp;&amp;a.y&gt;<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(a.x&lt;<span class="number">0</span>&amp;&amp;a.y&lt;=<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(a.x&gt;=<span class="number">0</span>&amp;&amp;a.y&lt;<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp3</span><span class="params">(point a,point b)</span>  <span class="comment">//先按象限从小到大排序 再按极角从小到大排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Quadrant(a)==Quadrant(b))<span class="comment">//返回值就是象限</span></span><br><span class="line">        <span class="keyword">return</span> cmp1(a,b);</span><br><span class="line">    <span class="keyword">else</span> Quadrant(a)&lt;Quadrant(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于三种方法的比较：</p><p>　　第三种方法按象限从小到大排序 再按极角从小到大排序是在有特殊需求的时候才会用到，这里不做比较。</p><p>　　关于第一种方法，利用atan2排序，他和利用叉积排序的主要区别在精度和时间上。</p><p>　　具体对比：时间：相较于计算叉积，利用atan2时间快，这个时间会快一点（记得做过一个题用atan2排序过了，用叉积的T了）</p><p>　　 精度： atan2精度不如叉积高，做过一个题用atan2因为精度问题WA了。</p><p>　　所以两种方法根据情况选择一种合适的使用。</p><p>例题(2019ccpc秦皇岛赛)：</p><p>【题目大意】</p><p> 给定n个点的x，y，再给定 q 个点，对每个点有一次询问，询问由这个点和前 n 个点能形成多少个直角三角形</p><p>解题思路其实场上已经想的差不多了，但是败在做题少，实现有困难上了（还是做题太少啊，菜哭）</p><p>分两种情况：</p><p>一种是询问点是直角顶点</p><p>一种是询问点不是直角顶点</p><p>对两种情况，分别枚举，向前 n 个点连边，极角排序</p><p>然后再对每个边枚举，直接查看和他垂直的直线是否存在</p><p>对第二种情况特殊处理下，只是查询的点略微有些差别</p><p><strong>对 map 的一些新理解：</strong></p><p><strong>只需要重载 &lt; 就能够实现 &gt; 和 ==</strong> （因为map的count应该是二分找的？）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll x, y;</span><br><span class="line">    P(ll a=<span class="number">0</span>,ll b=<span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        x = a, y = b;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">P <span class="title">base</span><span class="params">()</span><span class="keyword">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x == <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span>))    <span class="keyword">return</span> P(-x, -y);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    P <span class="keyword">operator</span>-(<span class="keyword">const</span> P &amp;a) <span class="keyword">const</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> P(x - a.x, y - a.y); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> P  &amp;a)<span class="keyword">const</span> </span><br><span class="line">    &#123;</span><br><span class="line">        P p1 = base(), p2 = a.base();</span><br><span class="line">        <span class="keyword">return</span> p1.x*p2.y &lt; p2.x*p1.y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;p[MAXN],q[MAXN];</span><br><span class="line"><span class="built_in">map</span>&lt;P, <span class="keyword">int</span>&gt; mapp;</span><br><span class="line">ll ans[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,Q;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;N, &amp;Q))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;q[i].x, &amp;q[i].y);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            mapp.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)</span><br><span class="line">                mapp[(p[j] - q[i])]++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                P req = p[j] - q[i];</span><br><span class="line">                req = P(-req.y, req.x);</span><br><span class="line">                ans[i] += mapp.count(req) ? mapp[req] : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans[i] /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            mapp.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)</span><br><span class="line">                <span class="keyword">if</span> (i != j)    mapp[(p[j] - p[i])]++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= Q; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                P req = q[j] - p[i];</span><br><span class="line">                req = P(-req.y, req.x);</span><br><span class="line">                ans[j] += mapp.count(req) ? mapp[req] : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Computing Geometry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++最全大整数模板</title>
      <link href="/2019/09/26/c++%E6%9C%80%E5%85%A8%E5%A4%A7%E6%95%B4%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/09/26/c++%E6%9C%80%E5%85%A8%E5%A4%A7%E6%95%B4%E6%95%B0%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DividedByZeroException</span> &#123;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigInteger</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; digits;</span><br><span class="line"><span class="keyword">bool</span> sign;          <span class="comment">//  true for positive, false for negitive</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trim</span><span class="params">()</span></span>;        <span class="comment">//  remove zeros in tail, but if the value is 0, keep only one:)</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">BigInteger(<span class="keyword">int</span>);    <span class="comment">// construct with a int integer</span></span><br><span class="line">BigInteger(<span class="built_in">string</span>&amp;);</span><br><span class="line">BigInteger();</span><br><span class="line">BigInteger(<span class="keyword">const</span> BigInteger&amp;);</span><br><span class="line">BigInteger <span class="keyword">operator</span>=(<span class="keyword">const</span> BigInteger&amp; op2);</span><br><span class="line"></span><br><span class="line"><span class="function">BigInteger    <span class="title">abs</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function">BigInteger    <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//binary operators</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>+=(BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;);</span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>-=(BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;);</span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>*=(BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;);</span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>/=(BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;) <span class="keyword">throw</span>(DividedByZeroException);</span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>%=(BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;) <span class="keyword">throw</span>(DividedByZeroException);</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>+(<span class="keyword">const</span> BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;);</span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>-(<span class="keyword">const</span> BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;);</span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>*(<span class="keyword">const</span> BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;);</span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>/(<span class="keyword">const</span> BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;) <span class="keyword">throw</span>(DividedByZeroException);</span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>%(<span class="keyword">const</span> BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;) <span class="keyword">throw</span>(DividedByZeroException);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//uniary operators</span></span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>-(<span class="keyword">const</span> BigInteger&amp;);   <span class="comment">//negative</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>++(BigInteger&amp;);        <span class="comment">//++v</span></span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>++(BigInteger&amp;, <span class="keyword">int</span>);   <span class="comment">//v++</span></span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>--(BigInteger&amp;);        <span class="comment">//--v</span></span><br><span class="line"><span class="keyword">friend</span> BigInteger <span class="keyword">operator</span>--(BigInteger&amp;, <span class="keyword">int</span>);   <span class="comment">//v--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;);</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;);</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;);</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;);</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;);</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> BigInteger&amp;, <span class="keyword">const</span> BigInteger&amp;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp;, <span class="keyword">const</span> BigInteger&amp;);   <span class="comment">//print the BigInteger</span></span><br><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp;, BigInteger&amp;);         <span class="comment">// input the BigInteger</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> BigInteger ZERO;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> BigInteger ONE;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> BigInteger TEN;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> BigInteger BigInteger::ZERO = BigInteger(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> BigInteger BigInteger::ONE = BigInteger(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> BigInteger BigInteger::TEN = BigInteger(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BigInteger::BigInteger() &#123;</span><br><span class="line">sign = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BigInteger::BigInteger(<span class="keyword">int</span> val) &#123; <span class="comment">// construct with a int integer</span></span><br><span class="line"><span class="keyword">if</span> (val &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">sign = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">sign = <span class="literal">false</span>;</span><br><span class="line">val *= (<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">digits.push_back((<span class="keyword">char</span>)(val % <span class="number">10</span>));</span><br><span class="line">val /= <span class="number">10</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (val != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BigInteger::BigInteger(<span class="built_in">string</span>&amp; def) &#123;</span><br><span class="line">sign = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">string</span>::reverse_iterator iter = def.rbegin(); iter &lt; def.rend(); iter++) &#123;</span><br><span class="line"><span class="keyword">char</span> ch = (*iter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (iter == def.rend() - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'+'</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'-'</span>) &#123;</span><br><span class="line">sign = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">digits.push_back((<span class="keyword">char</span>)((*iter) - <span class="string">'0'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BigInteger::trim() &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::reverse_iterator iter = digits.rbegin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!digits.empty() &amp;&amp; (*iter) == <span class="number">0</span>) &#123;</span><br><span class="line">digits.pop_back();</span><br><span class="line">iter = digits.rbegin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (digits.size() == <span class="number">0</span>) &#123;</span><br><span class="line">sign = <span class="literal">true</span>;</span><br><span class="line">digits.push_back(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BigInteger::BigInteger(<span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line">sign = op2.sign;</span><br><span class="line">digits = op2.digits;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BigInteger BigInteger::<span class="keyword">operator</span>=(<span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line">digits = op2.digits;</span><br><span class="line">sign = op2.sign;</span><br><span class="line"><span class="keyword">return</span> (*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BigInteger BigInteger::<span class="built_in">abs</span>() <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (sign) &#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -(*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger BigInteger::<span class="built_in">pow</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line"><span class="function">BigInteger <span class="title">res</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a; i++) &#123;</span><br><span class="line">res *= (*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//binary operators</span></span><br><span class="line">BigInteger <span class="keyword">operator</span>+=(BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line"><span class="keyword">if</span> (op1.sign == op2.sign) &#123;     <span class="comment">//只处理相同的符号的情况，异号的情况给-处理</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::iterator iter1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::const_iterator iter2;</span><br><span class="line">iter1 = op1.digits.begin();</span><br><span class="line">iter2 = op2.digits.begin();</span><br><span class="line"><span class="keyword">char</span> to_add = <span class="number">0</span>;        <span class="comment">//进位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter1 != op1.digits.end() &amp;&amp; iter2 != op2.digits.end()) &#123;</span><br><span class="line">(*iter1) = (*iter1) + (*iter2) + to_add;</span><br><span class="line">to_add = ((*iter1) &gt; <span class="number">9</span>);    <span class="comment">// 大于9进一位</span></span><br><span class="line">(*iter1) = (*iter1) % <span class="number">10</span>;</span><br><span class="line">iter1++;</span><br><span class="line">iter2++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter1 != op1.digits.end()) &#123;    <span class="comment">//</span></span><br><span class="line">(*iter1) = (*iter1) + to_add;</span><br><span class="line">to_add = ((*iter1) &gt; <span class="number">9</span>);</span><br><span class="line">(*iter1) %= <span class="number">10</span>;</span><br><span class="line">iter1++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter2 != op2.digits.end()) &#123;</span><br><span class="line"><span class="keyword">char</span> val = (*iter2) + to_add;</span><br><span class="line">to_add = (val &gt; <span class="number">9</span>);</span><br><span class="line">val %= <span class="number">10</span>;</span><br><span class="line">op1.digits.push_back(val);</span><br><span class="line">iter2++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (to_add != <span class="number">0</span>) &#123;</span><br><span class="line">op1.digits.push_back(to_add);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> op1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (op1.sign) &#123;</span><br><span class="line"><span class="keyword">return</span> op1 -= (-op2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> op1 = op2 - (-op1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger <span class="keyword">operator</span>-=(BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line"><span class="keyword">if</span> (op1.sign == op2.sign) &#123;     <span class="comment">//只处理相同的符号的情况，异号的情况给+处理</span></span><br><span class="line"><span class="keyword">if</span> (op1.sign) &#123;</span><br><span class="line"><span class="keyword">if</span> (op1 &lt; op2) &#123; <span class="comment">// 2 - 3</span></span><br><span class="line"><span class="keyword">return</span>  op1 = -(op2 - op1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (-op1 &gt; -op2) &#123; <span class="comment">// (-3)-(-2) = -(3 - 2)</span></span><br><span class="line"><span class="keyword">return</span> op1 = -((-op1) - (-op2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;           <span class="comment">// (-2)-(-3) = 3 - 2</span></span><br><span class="line"><span class="keyword">return</span> op1 = (-op2) - (-op1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::iterator iter1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::const_iterator iter2;</span><br><span class="line">iter1 = op1.digits.begin();</span><br><span class="line">iter2 = op2.digits.begin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> to_substract = <span class="number">0</span>;  <span class="comment">//借位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter1 != op1.digits.end() &amp;&amp; iter2 != op2.digits.end()) &#123;</span><br><span class="line">(*iter1) = (*iter1) - (*iter2) - to_substract;</span><br><span class="line">to_substract = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((*iter1) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">to_substract = <span class="number">1</span>;</span><br><span class="line">(*iter1) += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iter1++;</span><br><span class="line">iter2++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter1 != op1.digits.end()) &#123;</span><br><span class="line">(*iter1) = (*iter1) - to_substract;</span><br><span class="line">to_substract = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((*iter1) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">to_substract = <span class="number">1</span>;</span><br><span class="line">(*iter1) += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iter1++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">op1.trim();</span><br><span class="line"><span class="keyword">return</span> op1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (op1 &gt; BigInteger::ZERO) &#123;</span><br><span class="line"><span class="keyword">return</span> op1 += (-op2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> op1 = -(op2 + (-op1));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BigInteger <span class="keyword">operator</span>*=(BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line">BigInteger result(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (op1 == BigInteger::ZERO || op2 == BigInteger::ZERO) &#123;</span><br><span class="line">result = BigInteger::ZERO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::const_iterator iter2 = op2.digits.begin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter2 != op2.digits.end()) &#123;</span><br><span class="line"><span class="keyword">if</span> (*iter2 != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">char</span>&gt; temp(op1.digits.begin(), op1.digits.end());</span><br><span class="line"><span class="keyword">char</span> to_add = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">char</span>&gt;::iterator iter1 = temp.begin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter1 != temp.end()) &#123;</span><br><span class="line">(*iter1) *= (*iter2);</span><br><span class="line">(*iter1) += to_add;</span><br><span class="line">to_add = (*iter1) / <span class="number">10</span>;</span><br><span class="line">(*iter1) %= <span class="number">10</span>;</span><br><span class="line">iter1++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (to_add != <span class="number">0</span>) &#123;</span><br><span class="line">temp.push_back(to_add);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num_of_zeros = iter2 - op2.digits.begin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (num_of_zeros--) &#123;</span><br><span class="line">temp.push_front(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger temp2;</span><br><span class="line">temp2.digits.insert(temp2.digits.end(), temp.begin(), temp.end());</span><br><span class="line">temp2.trim();</span><br><span class="line">result = result + temp2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iter2++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result.sign = ((op1.sign &amp;&amp; op2.sign) || (!op1.sign &amp;&amp; !op2.sign));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">op1 = result;</span><br><span class="line"><span class="keyword">return</span> op1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger <span class="keyword">operator</span>/=(BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) <span class="keyword">throw</span>(DividedByZeroException) &#123;</span><br><span class="line"><span class="keyword">if</span> (op2 == BigInteger::ZERO) &#123;</span><br><span class="line"><span class="keyword">throw</span> DividedByZeroException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger t1 = op1.<span class="built_in">abs</span>(), t2 = op2.<span class="built_in">abs</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t1 &lt; t2) &#123;</span><br><span class="line">op1 = BigInteger::ZERO;</span><br><span class="line"><span class="keyword">return</span> op1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在 t1 &gt; t2 &gt; 0</span></span><br><span class="line"><span class="comment">//只需将 t1/t2的结果交给result就可以了</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">char</span>&gt; temp;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::reverse_iterator iter = t1.digits.rbegin();</span><br><span class="line"></span><br><span class="line"><span class="function">BigInteger <span class="title">temp2</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter != t1.digits.rend()) &#123;</span><br><span class="line">temp2 = temp2 * BigInteger::TEN + BigInteger((<span class="keyword">int</span>)(*iter));</span><br><span class="line"><span class="keyword">char</span> s = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (temp2 &gt;= t2) &#123;</span><br><span class="line">temp2 = temp2 - t2;</span><br><span class="line">s = s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp.push_front(s);</span><br><span class="line">iter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">op1.digits.clear();</span><br><span class="line">op1.digits.insert(op1.digits.end(), temp.begin(), temp.end());</span><br><span class="line">op1.trim();</span><br><span class="line">op1.sign = ((op1.sign &amp;&amp; op2.sign) || (!op1.sign &amp;&amp; !op2.sign));</span><br><span class="line"><span class="keyword">return</span> op1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger <span class="keyword">operator</span>%=(BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) <span class="keyword">throw</span>(DividedByZeroException) &#123;</span><br><span class="line"><span class="keyword">return</span> op1 -= ((op1 / op2) * op2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger <span class="keyword">operator</span>+(<span class="keyword">const</span> BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line"><span class="function">BigInteger <span class="title">temp</span><span class="params">(op1)</span></span>;</span><br><span class="line">temp += op2;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line">BigInteger <span class="keyword">operator</span>-(<span class="keyword">const</span> BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line"><span class="function">BigInteger <span class="title">temp</span><span class="params">(op1)</span></span>;</span><br><span class="line">temp -= op2;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger <span class="keyword">operator</span>*(<span class="keyword">const</span> BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line"><span class="function">BigInteger <span class="title">temp</span><span class="params">(op1)</span></span>;</span><br><span class="line">temp *= op2;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger <span class="keyword">operator</span>/(<span class="keyword">const</span> BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) <span class="keyword">throw</span>(DividedByZeroException) &#123;</span><br><span class="line">BigInteger temp(op1);</span><br><span class="line">temp /= op2;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger <span class="keyword">operator</span>%(<span class="keyword">const</span> BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) <span class="keyword">throw</span>(DividedByZeroException) &#123;</span><br><span class="line">BigInteger temp(op1);</span><br><span class="line">temp %= op2;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//uniary operators</span></span><br><span class="line">BigInteger <span class="keyword">operator</span>-(<span class="keyword">const</span> BigInteger&amp; op) &#123;  <span class="comment">//negative</span></span><br><span class="line">BigInteger temp = BigInteger(op);</span><br><span class="line">temp.sign = !temp.sign;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger <span class="keyword">operator</span>++(BigInteger&amp; op) &#123;   <span class="comment">//++v</span></span><br><span class="line">op += BigInteger::ONE;</span><br><span class="line"><span class="keyword">return</span> op;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger <span class="keyword">operator</span>++(BigInteger&amp; op, <span class="keyword">int</span> x) &#123; <span class="comment">//v++</span></span><br><span class="line"><span class="function">BigInteger <span class="title">temp</span><span class="params">(op)</span></span>;</span><br><span class="line">++op;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger <span class="keyword">operator</span>--(BigInteger&amp; op) &#123;   <span class="comment">//--v</span></span><br><span class="line">op -= BigInteger::ONE;</span><br><span class="line"><span class="keyword">return</span> op;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigInteger <span class="keyword">operator</span>--(BigInteger&amp; op, <span class="keyword">int</span> x) &#123; <span class="comment">//v--</span></span><br><span class="line"><span class="function">BigInteger <span class="title">temp</span><span class="params">(op)</span></span>;</span><br><span class="line">--op;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line"><span class="keyword">if</span> (op1.sign != op2.sign) &#123;</span><br><span class="line"><span class="keyword">return</span> !op1.sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (op1.digits.size() != op2.digits.size())</span><br><span class="line"><span class="keyword">return</span> (op1.sign &amp;&amp; op1.digits.size() &lt; op2.digits.size())</span><br><span class="line">|| (!op1.sign &amp;&amp; op1.digits.size() &gt; op2.digits.size());</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::const_reverse_iterator iter1, iter2;</span><br><span class="line">iter1 = op1.digits.rbegin();</span><br><span class="line">iter2 = op2.digits.rbegin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter1 != op1.digits.rend()) &#123;</span><br><span class="line"><span class="keyword">if</span> (op1.sign &amp;&amp; *iter1 &lt; *iter2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (op1.sign &amp;&amp; *iter1 &gt; * iter2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!op1.sign &amp;&amp; *iter1 &gt; * iter2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!op1.sign &amp;&amp; *iter1 &lt; *iter2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iter1++;</span><br><span class="line">iter2++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line"><span class="keyword">if</span> (op1.sign != op2.sign || op1.digits.size() != op2.digits.size()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::const_iterator iter1, iter2;</span><br><span class="line">iter1 = op1.digits.begin();</span><br><span class="line">iter2 = op2.digits.begin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter1 != op1.digits.end()) &#123;</span><br><span class="line"><span class="keyword">if</span> (*iter1 != *iter2) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iter1++;</span><br><span class="line">iter2++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line"><span class="keyword">return</span> !(op1 == op2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line"><span class="keyword">return</span> (op1 &gt; op2) || (op1 == op2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line"><span class="keyword">return</span> (op1 &lt; op2) || (op1 == op2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> BigInteger&amp; op1, <span class="keyword">const</span> BigInteger&amp; op2) &#123;</span><br><span class="line"><span class="keyword">return</span> !(op1 &lt;= op2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; stream, <span class="keyword">const</span> BigInteger&amp; val) &#123;  <span class="comment">//print the BigInteger</span></span><br><span class="line"><span class="keyword">if</span> (!val.sign) &#123;</span><br><span class="line">stream &lt;&lt; <span class="string">"-"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::const_reverse_iterator iter = val.digits.rbegin(); iter != val.digits.rend(); iter++) &#123;</span><br><span class="line">stream &lt;&lt; (<span class="keyword">char</span>)((*iter) + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; stream, BigInteger&amp; val) &#123;   <span class="comment">//Input the BigInteger</span></span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line">stream &gt;&gt; str;</span><br><span class="line">val = BigInteger(str);</span><br><span class="line"><span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BigInteger a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 高精度模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卡特兰数列</title>
      <link href="/2019/09/24/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0%E5%88%97/"/>
      <url>/2019/09/24/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>卡特兰数列的原理及其应用场景<br>令h(1)＝1，catalan数满足递归式：<br>h(n)= h(1)<em>h(n-1) + h(2)</em>h(n-2) + … + h(n-1)h(1) (其中n&gt;=2)<br>该递推关系的解为：<strong>h(n)=C(2n,n)/(n+1) (n=0,1,2,…)</strong></p><p>1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, 6564120420, 24466267020, 91482563640, 343059613650, 1289904147324, 4861946401452, … </p><a id="more"></a><p>1.括号化问题。<br>矩阵链乘： P=a1×a2×a3×……×an，依据乘法结合律，不改变其顺序，只用括号表示成对的乘积，试问有几种括号化的方案？(h(n)种)<br>2.出栈次序问题。<br>一个栈(无穷大)的进栈序列为1,2,3,..n,有多少个不同的出栈序列?<br>类似：有2n个人排成一行进入剧场。入场费5元。其中只有n个人有一张5元钞票，另外n人只有10元钞票，剧院无其它钞票，问有多少中方法使得只要有10元的人买票，售票处就有5元的钞票找零？(将持5元者到达视作将5元入栈，持10元者到达视作使栈中某5元出栈)<br>3.将多边行划分为三角形问题。<br>将一个凸多边形区域分成三角形区域的方法数?<br>类似：一位大城市的律师在她住所以北n个街区和以东n个街区处工作。每天她走2n个街区去上班。如果他<br>从不穿越（但可以碰到）从家到办公室的对角线，那么有多少条可能的道路？<br>类似：在圆上选择2n个点,将这些点成对连接起来使得所得到的n条线段不相交的方法数?</p><p>题意：一个瓶子里有n片药，每次吃半片，从瓶子里可能取出整片，也可能取出半片，如果取到的药是整片的，就把它分成两半，吃掉其中的一半，另一半重新放入瓶中，如果取到半粒药，则直接吃掉。问2n天内吃完药有多少种取法。</p><p>分析：第一次一定取出的是整片，最后一次取出来的一定是半片，只有先取出整片，才有取出半片的可能。n片药，一定是2n次取完的，这2n次一定是取n次整片，n次半片，题中说取出整片记W，半片记H，其实就是n个W和n个H的组合。<br>每种取的状态都与它前面取的的状态有关系，暗示用DP来解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n, dp[maxn][maxn];<span class="comment">//一维表示整片个数，二维表示半片个数，数组维护可能组合的总数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">dp[<span class="number">1</span>][i] = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j)</span><br><span class="line">dp[i][j] = dp[i][j - <span class="number">1</span>] + dp[i - <span class="number">1</span>][j + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[n][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> number theory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客练习赛1083</title>
      <link href="/2019/09/10/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B1083/"/>
      <url>/2019/09/10/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B1083/</url>
      
        <content type="html"><![CDATA[<p>牛客练习<a href="https://ac.nowcoder.com/acm/contest/1083#question" target="_blank" rel="noopener">1083</a></p><p><a href="https://ac.nowcoder.com/acm/contest/1083/B" target="_blank" rel="noopener">B题</a></p><p>​        字符串常用套路：将所有后面的状态完全记录到到前一个中,找子序列就按照信息跳着找就行了。</p><p>用dp[i][j]记录后面所有字母出现位置（如果遇到相同的字母，则保留里i位置近的出现位置）。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, q,dp[maxn][<span class="number">30</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = s.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">25</span>; j++)</span><br><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j];</span><br><span class="line">dp[i][s[i] - <span class="string">'a'</span>] = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="built_in">string</span> s1;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>,cur=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dp[cur][s1[i]-<span class="string">'a'</span>] == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">cur = dp[cur][s1[i] - <span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">if</span> (i == s1.size() - <span class="number">1</span>)</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C题：</p><p>求满足$n^2+x^2=y^2$的三个正整数：</p><p>​        （y-x)(y+x)=n^2,由整数性质决定，n  ，（y-x），（y+x)  同为奇数或者偶数.</p><p>​        n=1或2时，无解。</p><p>​        当n是奇数时，取y-x=1,那么有$y+x=n^2$，解出方程$x=(n^2-1)/2$,$y=(n^2+1)/2$。n,x,y是一组解。</p><p>​        当n为偶数时，取y-x=2,那么$y+x=n^2/2$，解出方程$x=(n^2/2)^2-1$,$y=(n^2/2)^2+1$。n,x,y是一组解。</p><p>时间复杂度：1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,a) for(int i=0;i&lt;a;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LP pair<span class="meta-string">&lt;ll ,ll&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (n * n - <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; (n * n + <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (n / <span class="number">2</span>) * (n / <span class="number">2</span>) - <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; (n / <span class="number">2</span>) * (n / <span class="number">2</span>) + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D题：</p><p>​        就是一个简单的模拟题，直接贴代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;  p[maxn];</span><br><span class="line"><span class="keyword">int</span> n, q, a[maxn], b[maxn],vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; a, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.second == b.second) <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line"><span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; p[i].first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; p[i].second;</span><br><span class="line">sort(p, p + n, cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> l, r,res=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = l; j &lt;= r; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line"><span class="keyword">if</span> (p[k].first &lt;= j &amp;&amp; p[k].second &gt;= j &amp;&amp; !vis[k]) &#123;</span><br><span class="line">vis[k] = <span class="number">1</span>,res++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 72 (Rated for Div. 2)</title>
      <link href="/2019/09/10/Educational-Codeforces-Round-72-Rated-for-Div-2/"/>
      <url>/2019/09/10/Educational-Codeforces-Round-72-Rated-for-Div-2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1217" target="_blank" rel="noopener">Educational Codeforces Round 72 (Rated for Div. 2)</a></p><p>B题：</p><p>​        首先找最大值看一刀能不能砍死它，不能再处理，记得最后一刀砍最大的。</p><p>​        时间复杂度：nlog(n)</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> d, h, cazhi;</span><br><span class="line">&#125;no[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node&amp; a, node&amp; b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.cazhi == b.cazhi ? a.d &gt; b.d:a.cazhi &gt; b.cazhi;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> n, x,maxnn=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt;no[i].d &gt;&gt; no[i].h;</span><br><span class="line"><span class="keyword">if</span> (no[i].d &gt; maxnn)maxnn = no[i].d;</span><br><span class="line">no[i].cazhi = no[i].d - no[i].h;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">sort(no + <span class="number">1</span>, no + n + <span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (maxnn &gt;= x) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (no[<span class="number">1</span>].h - no[<span class="number">1</span>].d &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> temp = (x - maxnn)/(<span class="number">1.00</span>*(no[<span class="number">1</span>].d-no[<span class="number">1</span>].h));</span><br><span class="line"><span class="keyword">int</span> temp1 = <span class="built_in">ceil</span>(temp);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; temp1+res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C题：</p><p>​        从一个1开始遍历后面的（最大20位），然后看这个1的前导0是否可以满足条件。(注意细节的处理和代码的精简化)</p><p>​        时间复杂度：n</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q, dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> s1, s2 = <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1;</span><br><span class="line"><span class="built_in">string</span> s = s2 + s1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s1.size(); i++) </span><br><span class="line"><span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">'0'</span>) dp[i] = dp[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s1.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">'0'</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">ll len = s1.size() - i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; min((<span class="keyword">long</span> <span class="keyword">long</span>)<span class="number">20</span>, len); j++) &#123;</span><br><span class="line">value = <span class="number">2</span> * value + (s[i + j] - <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">if</span> (value &gt;= j + <span class="number">1</span> &amp;&amp; value - j - <span class="number">1</span> &lt;= dp[i]) res++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round #583</title>
      <link href="/2019/09/07/Codeforces-Round-583/"/>
      <url>/2019/09/07/Codeforces-Round-583/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1214" target="_blank" rel="noopener">Codeforces Round #583 (Div. 1 + Div. 2, based on Olympiad of Metropolises)</a>题解</p><p>A题：</p><p>​        比赛的时候用分别枚举枚举美元和欧元，然后TLE了。后来改了一下就过了，先枚举欧元合法的情况，然后取余美元就可以了，因为肯定是尽可能的多取美元。</p><p>​        时间复杂度：n</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,a) for(int i=0;i&lt;a;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_n = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> res = inf;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123; <span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">200</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span>  k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> temp1 = n - k * a[i] * y;</span><br><span class="line"><span class="keyword">if</span> (temp1 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">6</span>; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp3 = temp1 % (b[i]*x);</span><br><span class="line">res = min(res, temp3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C题：</p><p>​        比赛的时候直接写了一个n方的算法，本来以为可以靠着break能过题的，然后真的过了，结果系统重判被卡掉了，告诉我们不能偷懒，要认真想题。后来思路如下：</p><p>​        将（ 记为-1，将 ）记为1，然后看前缀和是否满足等于0（代表”（ “ 和 ” ）“一样多），然后再看有多少个 ）在（ 的前面就可以了。</p><p>时间复杂度：n</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,a) for(int i=0;i&lt;a;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,sum[maxn],ma=-inf; <span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">'('</span>) &#123; </span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">sum[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sum[i] =sum[i<span class="number">-1</span>] <span class="number">-1</span>;</span><br><span class="line">ma = max(ma, sum[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">')'</span>) &#123; </span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">sum[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sum[i] = sum[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">ma = max(ma, sum[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (sum[n - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ma &lt;= <span class="number">1</span>)</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D题：</p><p>​        首先肯定知道最多需要两个点就把路给封死了，就是在起点处的下方和右方。</p><p>思路（代码实现）：</p><p>​            先从起点按照只能跑右和下的规则，把所有能到达的点给标记下来了。然后，如果能到终点的话肯定是可以的，在从终点开始往上和左跑，标记一遍。如果被这两者都标记了的肯定是可以从起点到终点的一条路。最关键的部分来了，就是从矩形的忧伤到左下画一条斜直线，看这条斜直线最少和路径有几个交点，如果是一个话，显然就把这个交点封死就可以了，如果不是一个，就是用两个点封死。</p><p>时间复杂度：n*m</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> h, w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h &gt;&gt; w;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vec(h);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; vec[i];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; can1(h);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; can2(h);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; i++) &#123;</span><br><span class="line">can1[i].resize(w, <span class="literal">false</span>);</span><br><span class="line">can2[i].resize(w, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">can1[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!can1[i][j])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> &lt; h &amp;&amp; vec[i + <span class="number">1</span>][j] == <span class="string">'.'</span>)</span><br><span class="line">can1[i+<span class="number">1</span>][j] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (j + <span class="number">1</span> &lt; w &amp;&amp; vec[i][j + <span class="number">1</span>] == <span class="string">'.'</span>)</span><br><span class="line">can1[i][j + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!can1[h - <span class="number">1</span>][w - <span class="number">1</span>] ) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">can2[h - <span class="number">1</span>][w - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=h<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = w - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line"><span class="keyword">if</span> (!can2[i][j])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; vec[i - <span class="number">1</span>][j] == <span class="string">'.'</span>)</span><br><span class="line">can2[i - <span class="number">1</span>][j] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; vec[i][j - <span class="number">1</span>] == <span class="string">'.'</span>)</span><br><span class="line">can2[i][j - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= h + w - <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x = i, y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; h - <span class="number">1</span>) &#123;</span><br><span class="line">y += x - (h - <span class="number">1</span>);</span><br><span class="line">x = h - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x&gt;=<span class="number">0</span>&amp;&amp;y&lt;w) &#123;</span><br><span class="line"><span class="keyword">if</span> (can1[x][y] &amp;&amp; can2[x][y])cnt++;</span><br><span class="line">x--; y++;</span><br><span class="line">&#125;<span class="comment">//画一条从右上到左下贯穿矩形的斜直线(左上角和右下角当然不算)，看有几个点存在交</span></span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>E题：</p><p>​        正解： 要好好利用d[i]&lt;=n这个条件，把d[i]从大到小进行排序，以所有线的一段作为主链，然后先安排大的，肯定可以在一开始的主链中找到，如果找不到就在主链的尾部进行添加，像这样就可以一直找到最小的都存在。</p><p>​        误解：一开始自己的想法是先找最小的边，一点一点进行构造，后来发现实在是太复杂了。然后，想着选一端作为主链，从小的开始排，发现中间到最后一直出现n作为长度极其难处理。最后得到正解，先排最大的话，一定可以构造出符合每一个长度要求的值。</p><p>​        时间复杂度：n</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&amp;  a, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.first &gt; b.first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d[i].first;</span><br><span class="line">d[i].second = <span class="number">2</span> * i - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sort(d + <span class="number">1</span>, d + <span class="number">1</span> + n, cmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)v.push_back(d[i].second);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)<span class="built_in">cout</span> &lt;&lt; d[i].second &lt;&lt; <span class="string">" "</span> &lt;&lt; d[i+<span class="number">1</span>].second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i<span class="number">-1</span> + d[i].first == v.size()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v.back() &lt;&lt; <span class="string">" "</span> &lt;&lt; d[i].second + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">v.push_back(d[i].second + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v[i<span class="number">-1</span> + d[i].first<span class="number">-1</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; d[i].second + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round #582 </title>
      <link href="/2019/08/31/Codeforces-Round-582/"/>
      <url>/2019/08/31/Codeforces-Round-582/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1213" target="_blank" rel="noopener">Codeforces Round #582 </a>小结</p><p>D2题解：</p><p>​        将所有的数一直除2的次方，直到该数为0，保存每一次出现的数字和对应花费的次数（用小根堆保存）。最后，将所有可能出现的数的花费遍历一遍，找最小值。</p><p>​        时间复杂度：n+log（n）</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,a) for(int i=1;i&lt;=a;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> r[maxn],p[maxn];</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; pque[maxn];</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">ll res = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i= <span class="number">1</span>; i &lt;= a; i++)<span class="built_in">cin</span> &gt;&gt; r[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= inf; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = r[i] / (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line"><span class="keyword">if</span> (temp)</span><br><span class="line">pque[temp] .push(j);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pque[temp].push(j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, sum_ = inf;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2e5</span>; i++) &#123;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (pque[i].size() &gt;= b) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "  " &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b; j++) &#123;</span><br><span class="line">sum += pque[i].top();</span><br><span class="line">pque[i].pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum &lt; sum_)</span><br><span class="line">sum_ = sum;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum_ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>E题解：</p><p>​        abc使得 ab bc ca 都包含在内                        ab bc ca ———-&gt; abc</p><p>​        acb使得 ac cb ba 都包含在内                        ac cb ba ———-&gt; acb</p><p>​        bac使得 ba ac cb 都包含在内                        ba ac cb ———-&gt; bac</p><p>​        ……..</p><p>​        cba使得cb ba ac 都包含在内                        cb ba ac ———-&gt; cba</p><p>​        有一种特殊情况:</p><p>​        aaa…bbb…ccc…只使得aa,ab,bb,bc,cc包含在内    aa,ab,bb,bc,cc ———-&gt; aaa…bbb…ccc…</p><p>​        aaa…ccc..bbb…只使得aa,ac,cc,cb,bb包含在内     aa,ac,cc,cb,bb ———-&gt; aaa…ccc..bbb…</p><p>​        …….</p><p>​        ccc…bbb..aaa..只使得cc,cb,bb,ba,aa包含在内      cc,cb,bb,ba,aa ———-&gt; ccc…bbb..aaa..</p><p>​        所以我们如果枚举以上的情况，那么无论选择的s1 s2是由都不相同的（ac，ab），还是一个相同一个不同(aa,ab)，还是两个相同的情况，我们都包括在以上情况中。</p><p>​        得出结论就是，如果有答案，则一定存在于上述情况中；否则，就是没有答案；</p><p>​        时间复杂度：常数*n</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,a) for(int i=0;i&lt;a;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_n = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vec;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">string</span> o1, o2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; o1 &gt;&gt; o2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> x = <span class="string">'a'</span>; x &lt;= <span class="string">'c'</span>; x++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> y = <span class="string">'a'</span>; y &lt;= <span class="string">'c'</span>; y++) &#123;</span><br><span class="line"><span class="built_in">string</span> s1, s2;</span><br><span class="line"><span class="keyword">if</span> (x == y)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">char</span> z = x ^ y ^ <span class="string">'a'</span> ^ <span class="string">'b'</span> ^ <span class="string">'c'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">s1.push_back(x);</span><br><span class="line">s1.push_back(y);</span><br><span class="line">s1.push_back(z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)s2.push_back(x);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)s2.push_back(y);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)s2.push_back(z);</span><br><span class="line">vec.push_back(s1); vec.push_back(s2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vec.size(); j++) &#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">s = vec[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span> * n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((s[i] == o1[<span class="number">0</span>] &amp;&amp; s[i + <span class="number">1</span>] == o1[<span class="number">1</span>]) || (s[i] == o2[<span class="number">0</span>] &amp;&amp; s[i + <span class="number">1</span>] == o2[<span class="number">1</span>])) &#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>G题解：<br>        将树上的边按权值进行排序，将所问的大小也按权值进行排序。<br>        对于最小的询问的边，遍历满足条件的边，将边的两点进行维护，将相连的边选出来一个点为根，不断地维护根的符合条件数（两个要合并就是等于两个根的数进行相乘，再选出一个跟当做根节点，记得此处也要维护改过的根的数值）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,a) for(int i=1;i&lt;=a;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f(i,b) for(int i=0;i&lt;=b;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, m,father[maxn],ans[maxn],num[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> s, e, c;</span><br><span class="line">&#125;E[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(edge a,edge b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.c &lt; b.c;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ques</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> inx, cost;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(ques a, ques b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.cost &lt; b.cost;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_father</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (father[x] == x)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> father[x] = find_father(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">F(i, n - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; E[i].s &gt;&gt; E[i].e &gt;&gt; E[i].c;</span><br><span class="line"><span class="comment">//father[E[i].s] = E[i].s, father[E[i].e] = E[i].e;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(E + <span class="number">1</span>, E  + n, cmp1);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">F(i, m) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q[i].cost; q[i].inx = i;</span><br><span class="line">&#125;</span><br><span class="line">sort(q + <span class="number">1</span>, q + <span class="number">1</span> + m, cmp2);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">F(i, n)num[i] = <span class="number">1</span>,father[i]=i;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">ll pos = <span class="number">1</span>,ans_=<span class="number">0</span>;</span><br><span class="line">F(i,m)&#123;</span><br><span class="line"><span class="keyword">while</span> (pos &lt; n&amp;&amp; E[pos].c &lt;= q[i].cost) &#123;</span><br><span class="line"><span class="keyword">int</span> a = find_father(E[pos].s);</span><br><span class="line"><span class="keyword">int</span> b = find_father(E[pos].e);</span><br><span class="line"><span class="comment">//cout &lt;&lt; "a: " &lt;&lt; a &lt;&lt; "b: " &lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; "num[a]: " &lt;&lt; num[a] &lt;&lt; "num[b]: " &lt;&lt; num[b] &lt;&lt; endl;</span></span><br><span class="line">ans_ += <span class="number">1l</span>l * num[a] * num[b];</span><br><span class="line"><span class="comment">//cout &lt;&lt; "ans_: " &lt;&lt; ans_ &lt;&lt; endl;</span></span><br><span class="line">father[b] = a;</span><br><span class="line">num[a] +=num[b];</span><br><span class="line">pos++;</span><br><span class="line">&#125;</span><br><span class="line">ans[q[i].inx] = ans_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Round Corridor by codeforces</title>
      <link href="/2019/08/13/Round-Corridor-by-codeforces/"/>
      <url>/2019/08/13/Round-Corridor-by-codeforces/</url>
      
        <content type="html"><![CDATA[<p><img src="https://bigboomclap.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/N8SGG06PU21YN3CK_CBYO~1.png" alt></p><p><img src="https://bigboomclap.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/%6089%603%5DF6DQ71~D~P%7B(PQVJ8.png" alt></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,a) for(int i=0;i&lt;a;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_n = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line">ll n, m, q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upzheng</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a % b == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line"><span class="keyword">return</span> a / b + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a, b, c, d;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line"><span class="keyword">int</span> temp = gcd(n,m);</span><br><span class="line"><span class="keyword">int</span> temp1 = n / temp, temp2 = m / temp;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">n = temp1, m = temp2;</span><br><span class="line"><span class="keyword">if</span> (a == c &amp;&amp; a == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (upzheng(b, n) == upzheng(d, n))&#123;</span><br><span class="line">flag = <span class="number">1</span>; <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a == c &amp;&amp; a == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (upzheng(b, m) == upzheng(d, m)) &#123;</span><br><span class="line">flag = <span class="number">1</span>; <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; c == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (upzheng(b, n) == upzheng(d, m)) &#123;</span><br><span class="line">flag = <span class="number">1</span>; <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">2</span> &amp;&amp; c == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (upzheng(b, m) == upzheng(d, n)) &#123;</span><br><span class="line">flag = <span class="number">1</span>; <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> number theory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZOJ Problem Set - 1010</title>
      <link href="/2019/08/12/ZOJ-Problem-Set-1010/"/>
      <url>/2019/08/12/ZOJ-Problem-Set-1010/</url>
      
        <content type="html"><![CDATA[<p>ZOJ Problem Set - 1010</p><p>Area</p><p>Jerry, a middle school student, addicts himself to mathematical research. Maybe the problems he has thought are really too easy to an expert. But as an amateur, especially as a 15-year-old boy, he had done very well. He is so rolling in thinking the mathematical problem that he is easily to try to solve every problem he met in a mathematical way. One day, he found a piece of paper on the desk. His younger sister, Mary, a four-year-old girl, had drawn some lines. But those lines formed a special kind of concave polygon by accident as Fig. 1 shows.</p><p><img src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1010%2F1010-1.jpg" alt="img"><br>Fig. 1 The lines his sister had drawn</p><p>“Great!” he thought, “The polygon seems so regular. I had just learned how to calculate the area of triangle, rectangle and circle. I’m sure I can find out how to calculate the area of this figure.” And so he did. First of all, he marked the vertexes in the polygon with their coordinates as Fig. 2 shows. And then he found the result—0.75 effortless.</p><p><img src="http://acm.zju.edu.cn/onlinejudge/showImage.do?name=0000%2F1010%2F1010-2.jpg" alt="img"><br>Fig.2 The polygon with the coordinates of vertexes</p><p>Of course, he was not satisfied with the solution of such an easy problem. “Mmm, if there’s a random polygon on the paper, then how can I calculate the area?” he asked himself. Till then, he hadn’t found out the general rules on calculating the area of a random polygon. He clearly knew that the answer to this question is out of his competence. So he asked you, an erudite expert, to offer him help. The kind behavior would be highly appreciated by him.</p><p><strong>Input</strong></p><p>The input data consists of several figures. The first line of the input for each figure contains a single integer n, the number of vertexes in the figure. (0 &lt;= n &lt;= 1000).</p><p>In the following n lines, each contain a pair of real numbers, which describes the coordinates of the vertexes, (xi, yi). The figure in each test case starts from the first vertex to the second one, then from the second to the third, ���� and so on. At last, it closes from the nth vertex to the first one.</p><p>The input ends with an empty figure (n = 0). And this figure not be processed.</p><a id="more"></a><p><strong>Output</strong></p><p>As shown below, the output of each figure should contain the figure number and a colon followed by the area of the figure or the string “Impossible”.</p><p>If the figure is a polygon, compute its area (accurate to two fractional digits). According to the input vertexes, if they cannot form a polygon (that is, one line intersects with another which shouldn’t be adjoined with it, for example, in a figure with four lines, the first line intersects with the third one), just display “Impossible”, indicating the figure can’t be a polygon. If the amount of the vertexes is not enough to form a closed polygon, the output message should be “Impossible” either.</p><p>Print a blank line between each test cases.</p><p><strong>Sample Input</strong></p><p>5<br>0 0<br>0 1<br>0.5 0.5<br>1 1<br>1 0<br>4<br>0 0<br>0 1<br>1 0<br>1 1<br>0</p><p><strong>Output for the Sample Input</strong></p><p>Figure 1: 0.75</p><p>Figure 2: Impossible</p><p>`</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_n = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pt</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line">Pt() &#123;&#125;</span><br><span class="line">Pt(<span class="keyword">double</span> a, <span class="keyword">double</span> b) &#123;</span><br><span class="line">x = a; y = b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Pt p[max_n];</span><br><span class="line">Pt <span class="keyword">operator</span> -(Pt p, Pt p1) &#123;</span><br><span class="line"><span class="keyword">return</span> Pt(p.x - p1.x, p.y - p1.y);</span><br><span class="line">&#125;</span><br><span class="line">Pt <span class="keyword">operator</span> + (Pt p, Pt p1) &#123;</span><br><span class="line"><span class="keyword">return</span> Pt(p.x + p1.x, p.y + p1.y);</span><br><span class="line">&#125;</span><br><span class="line">Pt <span class="keyword">operator</span> * (<span class="keyword">double</span> A, Pt p1) &#123;</span><br><span class="line"><span class="keyword">return</span> Pt(A * p1.x, A * p1.y);</span><br><span class="line">&#125;</span><br><span class="line">Pt <span class="keyword">operator</span> * (Pt p1, <span class="keyword">double</span> A) &#123;</span><br><span class="line"><span class="keyword">return</span> Pt(A * p1.x, A * p1.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">det</span><span class="params">(Pt a, Pt b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// = 0 表示,相交于端点也是认定为相交</span></span><br><span class="line"><span class="comment">//https://www.cnblogs.com/g0feng/archive/2012/05/18/2508293.html</span></span><br><span class="line"><span class="comment">/*线段相交模板</span></span><br><span class="line"><span class="comment">应用：</span></span><br><span class="line"><span class="comment">1.判断两个线段相交</span></span><br><span class="line"><span class="comment">2.判断线段与直线相交</span></span><br><span class="line"><span class="comment">3.判断点在矩形内 */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SegmentProperIntersection</span><span class="params">(Pt s1, Pt e1, Pt s2, Pt e2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> c1 = det(s2 - s1, e1 - s1), c2 = det(e1 - s1, e2 - s1);</span><br><span class="line"><span class="keyword">double</span> c3 = det(s1 - s2, e2 - s2), c4 = det(e2 - s2, e1 - s2);</span><br><span class="line"><span class="keyword">if</span> (c1 * c2 &gt;= <span class="number">0</span> &amp;&amp; c3 * c4 &gt;= <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">havecross</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//从第 三 条线段开始, 一直到第 N-1 条线段</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (SegmentProperIntersection(p[i], p[i + <span class="number">1</span>], p[j - <span class="number">1</span>], p[j])) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断最后一条线段p[0]_p[n-1]</span></span><br><span class="line"><span class="comment">//从第二条线段一直比较到第 n-2 条线段</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">2</span>; i++) &#123; <span class="comment">//p[i]__p[i+1]</span></span><br><span class="line"><span class="keyword">if</span> (SegmentProperIntersection(p[<span class="number">0</span>], p[n - <span class="number">1</span>], p[i], p[i + <span class="number">1</span>])) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> area = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">area += det(p[i]-p[<span class="number">0</span>],p[i+<span class="number">1</span>]-p[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fabs</span>(area)/<span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> test = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">p[i] = Pt(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">3</span>)&#123; <span class="comment">//如果小于三个点, 肯定不能求面积</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Figure %d: Impossible\n"</span>, ++test);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (havecross()) &#123;</span><br><span class="line"><span class="comment">/*printf("Figure %d: Impossible\n", ++test);</span></span><br><span class="line"><span class="comment">printf("\n");*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Figure "</span> &lt;&lt; ++test &lt;&lt; <span class="string">": Impossible\n"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Figure %d: %.2lf"</span>, ++test, Area());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Computing Geometry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>template of Computing Geometry</title>
      <link href="/2019/08/12/template-of-Computing-Geometry/"/>
      <url>/2019/08/12/template-of-Computing-Geometry/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_n = <span class="number">1010</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vet;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a == bsgn(a - b) == 0</span></span><br><span class="line"><span class="comment">a &gt; bsgn(a - b) &gt; 0</span></span><br><span class="line"><span class="comment">a &gt;= bsgn(a - b) &gt;= 0</span></span><br><span class="line"><span class="comment">a &lt; bsgn(a - b) &lt; 0</span></span><br><span class="line"><span class="comment">a &lt;= bsgn(a - b) &lt;= 0</span></span><br><span class="line"><span class="comment">a != bsgn(a - b) != 0</span></span><br><span class="line"><span class="comment">计算机浮点数误差，在对浮点数进行大小比较时，如果他们的差的绝对值小于这个量，那么我们就认为他们是相等的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// sgn返回x经过eps（ilon）处理的符号，负数返回-1，正数返回1，x的绝对值如果足够小，就返回0。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;-eps ? <span class="number">-1</span> : x&gt;eps ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当提供给C语言中的标准库函数double sqrt (double x)的x为负值</span></span><br><span class="line"><span class="comment">时，sqrt会返回nan，输出时会显示成nan或-1.#IND00（根据系统的不同）</span></span><br><span class="line"><span class="comment">。在进行计算几何编程时，经常有对接近零</span></span><br><span class="line"><span class="comment">的数进行开方的情况，如果输入的数是一个极小的负数，那</span></span><br><span class="line"><span class="comment">么sqrt会返回nan这个错误的结果，导致输出错误。解决的方</span></span><br><span class="line"><span class="comment">法就是将sqrt包装一下，在每次开方前进行判断</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mysqrt</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> max(<span class="number">0.0</span>, <span class="built_in">sqrt</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">负零</span></span><br><span class="line"><span class="comment">大部分的标程的输出是不会输出负零的，如下面这段程序：</span></span><br><span class="line"><span class="comment">int main() &#123;</span></span><br><span class="line"><span class="comment">printf("%.2f\n", -0.0000000001);</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">会输出-0.00。有时这样的结果是错误的，所以在没有Special Judge的题目</span></span><br><span class="line"><span class="comment">要求四舍五入时，不要忘记对负零进行特殊判断。</span></span><br><span class="line"><span class="comment">但有的标程也不会进行这样的特殊判断，所以在WA时不要放弃摸索。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pt</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line">Pt() &#123;&#125;</span><br><span class="line">Pt(<span class="keyword">double</span> a, <span class="keyword">double</span> b) &#123;</span><br><span class="line">x = a; y = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">norm</span><span class="params">(Pt p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(p.x * p.x + p.y * p.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Pt p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"(%f, %f)\n"</span>, p.x, p.y);</span><br><span class="line">&#125;</span><br><span class="line">Pt <span class="keyword">operator</span> -(Pt p, Pt p1) &#123;</span><br><span class="line"><span class="keyword">return</span> Pt(p.x - p1.x, p.y - p1.y);</span><br><span class="line">&#125;</span><br><span class="line">Pt <span class="keyword">operator</span> + (Pt p, Pt p1) &#123;</span><br><span class="line"><span class="keyword">return</span> Pt(p.x + p1.x, p.y + p1.y);</span><br><span class="line">&#125;</span><br><span class="line">Pt <span class="keyword">operator</span> * (<span class="keyword">double</span> A, Pt p1) &#123;</span><br><span class="line"><span class="keyword">return</span> Pt(A * p1.x, A * p1.y);</span><br><span class="line">&#125;</span><br><span class="line">Pt <span class="keyword">operator</span> * (Pt p1, <span class="keyword">double</span> A) &#123;</span><br><span class="line"><span class="keyword">return</span> Pt(A * p1.x, A * p1.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(Pt a, Pt b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> norm((a - b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向量 a⃗ =(ax,ay) 的长度是 √a2x+a2y 。</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">(Pt p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(p.x * p.x + p.y * p.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a⋅b=axbx+ayby=|a||b|cosθ 点积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Pt a, Pt b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x* b.x + a.y * b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">|b×a|&gt;0 a在b的逆时针方向</span></span><br><span class="line"><span class="comment">|b×a|=0a与b共线</span></span><br><span class="line"><span class="comment">|b×a|&lt;0a在b的顺时针方向*/</span></span><br><span class="line"><span class="comment">//a×b=axby−aybx叉积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">det</span><span class="params">(Pt a, Pt b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x* b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将向量 a⃗  绕原点逆时针旋转 A 弧度。</span></span><br><span class="line"><span class="function">Pt <span class="title">rotate</span><span class="params">(Pt p, <span class="keyword">double</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Pt(p.x * <span class="built_in">cos</span>(a) - p.y * <span class="built_in">sin</span>(a), p.x * <span class="built_in">sin</span>(a) + p.y * <span class="built_in">cos</span>(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//直线和线段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们可以用一条线段的两个端点来表示一条线段。直线的表示有两种方式，一种方</span></span><br><span class="line"><span class="comment">//式是使用二元一次方程 y = kx + b 来表示，另一种是用直线上任意一条长度不为</span></span><br><span class="line"><span class="comment">//零的线段来表示。由于使用方程表示接近垂直于某坐标轴的直线时容易产生精度误</span></span><br><span class="line"><span class="comment">//差，所以我们通常使用直线上的某条线段来表示直线。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sg</span> &#123;</span></span><br><span class="line">Pt s, t;</span><br><span class="line">Sg(Pt s, Pt t) : s(s), t(t) &#123; &#125;</span><br><span class="line">Sg(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c, <span class="keyword">double</span> d) : s(a, b), t(c, d) &#123;</span><br><span class="line">s.x = a; s.y = b;</span><br><span class="line">t.x = c; t.y = d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//点在线段上的判断</span></span><br><span class="line"><span class="comment">//判断点 C 在线段 AB 上的两条依据：</span></span><br><span class="line"><span class="comment">//CA⋅CB= 0 。</span></span><br><span class="line"><span class="comment">//C 在以 AB 为对角顶点的矩形内</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PtOnSegment</span><span class="params">(Pt s, Pt t, Pt a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> !det(a - s, a - t) &amp;&amp; min(s.x, t.x) &lt;= a.x &amp;&amp; a.x &lt;= max(s.x, t.x) &amp;&amp;</span><br><span class="line">min(s.y, t.y) &lt;= a.y &amp;&amp; a.y &lt;= max(s.y, t.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断点 C 在 AB 为对角线定点的矩形内较麻烦，可以直接判断 CA→⋅CB→ </span></span><br><span class="line"><span class="comment">//的符号来判断 C 在直线 AB 上是否在 AB 之间。</span></span><br><span class="line"><span class="comment">//bool PtOnSegment(Pt p, Pt a, Pt b) &#123;</span></span><br><span class="line"><span class="comment">//return !sgn(det(p - a, b - a)) &amp;&amp; sgn(dot(p - a, p - b)) &lt;= 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//把上例代码中的&lt;=改成&lt;就能实现不含线段端点的点在线段上的判断。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//点在直线上的判断</span></span><br><span class="line"><span class="comment">//点在直线上的判断很简单只要把点在线段上的判断的步骤2去掉即可。</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PtOnline</span><span class="params">(Pt p, Pt a, Pt b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> !sgn(det(p - a, b - a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求点到直线的投影</span></span><br><span class="line"><span class="function">Pt <span class="title">PtLineProj</span><span class="params">(Pt s, Pt t, Pt p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> r = dot(p - s, t - s) / (norm(t - s) * norm(t - s));</span><br><span class="line"><span class="keyword">return</span> s + (t - s) * r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断直线关系</span></span><br><span class="line"><span class="comment">//直线有相交和平行两种关系，靠叉乘能简单判断。</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">parallel</span><span class="params">(Pt a, Pt b, Pt s, Pt t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> !sgn(det(a - b, s - t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// = 0 表示,相交于端点也是认定为相交</span></span><br><span class="line"><span class="comment">//https://www.cnblogs.com/g0feng/archive/2012/05/18/2508293.html</span></span><br><span class="line"><span class="comment">///*线段相交模板</span></span><br><span class="line"><span class="comment">//应用：</span></span><br><span class="line"><span class="comment">//1.判断两个线段相交</span></span><br><span class="line"><span class="comment">//2.判断线段与直线相交</span></span><br><span class="line"><span class="comment">//3.判断点在矩形内 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SegmentProperIntersection</span><span class="params">(Pt s1, Pt e1, Pt s2, Pt e2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> c1 = det(s2 - s1, e1 - s1), c2 = det(e1 - s1, e2 - s1);</span><br><span class="line"><span class="keyword">double</span> c3 = det(s1 - s2, e2 - s2), c4 = det(e2 - s2, e1 - s2);</span><br><span class="line"><span class="keyword">if</span> (c1 * c2 &gt;= <span class="number">0</span> &amp;&amp; c3 * c4 &gt;= <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求点到线段的距离</span></span><br><span class="line"><span class="comment">//求线段 ab 到点p最短距离的方法为：</span></span><br><span class="line"><span class="comment">//根据点 p 到的投影点的位置进行判断的方法：</span></span><br><span class="line"><span class="comment">//判断线段 pa 和 ab 所成的夹角，如果是钝角，那么 | pa | 是点到线段的最短距离。</span></span><br><span class="line"><span class="comment">//判断线段 pb 和 ab 所成的夹角，如果是钝角，那么 | pb | 是点到线段的最短距离。</span></span><br><span class="line"><span class="comment">//线段 pa 和线段 pb 与 ab 所成的夹角都不为钝角，那么点 p 到线段 ab 的距离是点 </span></span><br><span class="line"><span class="comment">//p 到直线 ab 的距离，这个距离可以用面积法直接算出来。</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PtSegmentDist</span><span class="params">(Pt a, Pt b, Pt p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sgn(dot(p - a, b - a)) &lt;= <span class="number">0</span>)<span class="keyword">return</span> norm(p - a);</span><br><span class="line"><span class="keyword">if</span> (sgn(dot(p - b, a - b)) &lt;= <span class="number">0</span>)<span class="keyword">return</span> norm(p - b);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fabs</span>(det(a - p, b - p)) / norm(a - b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//三角形</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//三角形的面积</span></span><br><span class="line"><span class="comment">//三角形的面积可以由叉积直接求出。</span></span><br><span class="line"><span class="comment">//S△ABC = | 1/2AB→×AC→ |</span></span><br><span class="line"><span class="comment">//判断点在三角形内</span></span><br><span class="line"><span class="comment">//判断点 P 在三角形 ABC 内部常用的又两种方法，面积法和叉积法。</span></span><br><span class="line"><span class="comment">//面积法</span></span><br><span class="line"><span class="comment">//S△PAB + S△PAC + S△PBC = S△ABC</span></span><br><span class="line"><span class="comment">//叉积法</span></span><br><span class="line"><span class="comment">//利用叉积的正负号判断，如图所示， AP 在向量 AC 的顺时针方向， CP 在</span></span><br><span class="line"><span class="comment">//向量 BC 的顺时针方向， BP 在向量 BC 的顺时针方向，利用这一性质推广，那</span></span><br><span class="line"><span class="comment">//么可以利用叉积的正负号来判断一个点是否在一个凸多边形内部。</span></span><br><span class="line"><span class="comment">struct line &#123; Pt a, b; &#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">double distance(Pt p1, Pt p2) &#123;</span></span><br><span class="line"><span class="comment">return sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Pt intersection(line u, line v) &#123;</span></span><br><span class="line"><span class="comment">Pt ret = u.a;</span></span><br><span class="line"><span class="comment">double t = ((u.a.x - v.a.x) * (v.a.y - v.b.y) - (u.a.y - v.a.y) * (v.a.x - v.b.x))</span></span><br><span class="line"><span class="comment">/ ((u.a.x - u.b.x) * (v.a.y - v.b.y) - (u.a.y - u.b.y) * (v.a.x - v.b.x));</span></span><br><span class="line"><span class="comment">ret.x += (u.b.x - u.a.x) * t;</span></span><br><span class="line"><span class="comment">ret.y += (u.b.y - u.a.y) * t;</span></span><br><span class="line"><span class="comment">return ret;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//外心</span></span><br><span class="line"><span class="comment">Pt circumcenter(Pt a, Pt b, Pt c) &#123;</span></span><br><span class="line"><span class="comment">line u, v;</span></span><br><span class="line"><span class="comment">u.a.x = (a.x + b.x) / 2;</span></span><br><span class="line"><span class="comment">u.a.y = (a.y + b.y) / 2;</span></span><br><span class="line"><span class="comment">u.b.x = u.a.x - a.y + b.y;</span></span><br><span class="line"><span class="comment">u.b.y = u.a.y + a.x - b.x;</span></span><br><span class="line"><span class="comment">v.a.x = (a.x + c.x) / 2;</span></span><br><span class="line"><span class="comment">v.a.y = (a.y + c.y) / 2;</span></span><br><span class="line"><span class="comment">v.b.x = v.a.x - a.y + c.y;</span></span><br><span class="line"><span class="comment">v.b.y = v.a.y + a.x - c.x;</span></span><br><span class="line"><span class="comment">return intersection(u, v);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//内心</span></span><br><span class="line"><span class="comment">Pt incenter(Pt a, Pt b, Pt c) &#123;</span></span><br><span class="line"><span class="comment">line u, v;</span></span><br><span class="line"><span class="comment">double m, n;</span></span><br><span class="line"><span class="comment">u.a = a;</span></span><br><span class="line"><span class="comment">m = atan2(b.y - a.y, b.x - a.x);</span></span><br><span class="line"><span class="comment">n = atan2(c.y - a.y, c.x - a.x);</span></span><br><span class="line"><span class="comment">u.b.x = u.a.x + cos((m + n) / 2);</span></span><br><span class="line"><span class="comment">u.b.y = u.a.y + sin((m + n) / 2);</span></span><br><span class="line"><span class="comment">v.a = b;</span></span><br><span class="line"><span class="comment">m = atan2(a.y - b.y, a.x - b.x);</span></span><br><span class="line"><span class="comment">n = atan2(c.y - b.y, c.x - b.x);</span></span><br><span class="line"><span class="comment">v.b.x = v.a.x + cos((m + n) / 2);</span></span><br><span class="line"><span class="comment">v.b.y = v.a.y + sin((m + n) / 2);</span></span><br><span class="line"><span class="comment">return intersection(u, v);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//垂心</span></span><br><span class="line"><span class="comment">Pt perpencenter(Pt a, Pt b, Pt c) &#123;</span></span><br><span class="line"><span class="comment">line u, v;</span></span><br><span class="line"><span class="comment">u.a = c;</span></span><br><span class="line"><span class="comment">u.b.x = u.a.x - a.y + b.y;</span></span><br><span class="line"><span class="comment">u.b.y = u.a.y + a.x - b.x;</span></span><br><span class="line"><span class="comment">v.a = b;</span></span><br><span class="line"><span class="comment">v.b.x = v.a.x - a.y + c.y;</span></span><br><span class="line"><span class="comment">v.b.y = v.a.y + a.x - c.x;</span></span><br><span class="line"><span class="comment">return intersection(u, v);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//重心</span></span><br><span class="line"><span class="comment">//到三角形三顶点距离的平方和最小的点</span></span><br><span class="line"><span class="comment">//三角形内到三边距离之积最大的点</span></span><br><span class="line"><span class="comment">Pt barycenter(Pt a, Pt b, Pt c) &#123;</span></span><br><span class="line"><span class="comment">line u, v;</span></span><br><span class="line"><span class="comment">u.a.x = (a.x + b.x) / 2;</span></span><br><span class="line"><span class="comment">u.a.y = (a.y + b.y) / 2;</span></span><br><span class="line"><span class="comment">u.b = c;</span></span><br><span class="line"><span class="comment">v.a.x = (a.x + c.x) / 2;</span></span><br><span class="line"><span class="comment">v.a.y = (a.y + c.y) / 2;</span></span><br><span class="line"><span class="comment">v.b = b;</span></span><br><span class="line"><span class="comment">return intersection(u, v);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//费马点</span></span><br><span class="line"><span class="comment">//若三角形3个内角均小于120°，那么3条距离连线正好三等分费马点所在的周角，即该点所对三角形三边的张角相等，均为120°</span></span><br><span class="line"><span class="comment">//。所以三角形的费马点也称为三角形的等角中心。</span></span><br><span class="line"><span class="comment">//若三角形有一内角大于等于120°，则此钝角的顶点就是距离和最小的点。</span></span><br><span class="line"><span class="comment">//到三角形三顶点距离之和最小的点</span></span><br><span class="line"><span class="comment">Pt fermentpoint(Pt a, Pt b, Pt c) &#123;</span></span><br><span class="line"><span class="comment">Pt u, v;</span></span><br><span class="line"><span class="comment">double step = fabs(a.x) + fabs(a.y) + fabs(b.x) + fabs(b.y) + fabs(c.x) + fabs(c.y);</span></span><br><span class="line"><span class="comment">int i, j, k;</span></span><br><span class="line"><span class="comment">u.x = (a.x + b.x + c.x) / 3;</span></span><br><span class="line"><span class="comment">u.y = (a.y + b.y + c.y) / 3;</span></span><br><span class="line"><span class="comment">while (step &gt; 1e-10)</span></span><br><span class="line"><span class="comment">for (k = 0; k &lt; 10; step /= 2, k++)</span></span><br><span class="line"><span class="comment">for (i = -1; i &lt;= 1; i++)</span></span><br><span class="line"><span class="comment">for (j = -1; j &lt;= 1; j++) &#123;</span></span><br><span class="line"><span class="comment">v.x = u.x + step * i;</span></span><br><span class="line"><span class="comment">v.y = u.y + step * j;</span></span><br><span class="line"><span class="comment">if (distance(u, a) + distance(u, b) + distance(u, c) &gt; distance(v, a) + distance(v, b) + distance(v, c))</span></span><br><span class="line"><span class="comment">u = v;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return u;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//简单多边形判断点是否在其内部</span></span><br><span class="line"><span class="comment">/*int dcmp(double x)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if (fabs(x) &lt; eps) return 0;</span></span><br><span class="line"><span class="comment">return x &lt; 0 ? -1 : 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">bool InSegment(Pt P, Pt A, Pt B)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">return dcmp(det(A - B, P - B)) == 0 &amp;&amp; dcmp(dot(A - P, B - P)) &lt;= 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">bool PointInPolygon(Pt p, Pt* poly, int n)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int wn = 0;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; n; ++i)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if (InSegment(p, poly[i], poly[(i + 1) % n])) return true;</span></span><br><span class="line"><span class="comment">int k = dcmp(det(poly[(i + 1) % n] - poly[i], p - poly[i]));</span></span><br><span class="line"><span class="comment">int d1 = dcmp(poly[i].y - p.y);</span></span><br><span class="line"><span class="comment">int d2 = dcmp(poly[(i + 1) % n].y - p.y);</span></span><br><span class="line"><span class="comment">if (k &gt; 0 &amp;&amp; d1 &lt;= 0 &amp;&amp; d2 &gt; 0) wn++;</span></span><br><span class="line"><span class="comment">if (k &lt; 0 &amp;&amp; d2 &lt;= 0 &amp;&amp; d1&gt;0) wn--;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (wn != 0) return true;</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">const int max_n = 1010;</span></span><br><span class="line"><span class="comment">Pt point[max_n];</span></span><br><span class="line"><span class="comment">vector&lt;int&gt; vet;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int n;</span></span><br><span class="line"><span class="comment">while (scanf("%d", &amp;n) == 1 &amp;&amp; n)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Pt poly[max_n], p;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; n; ++i)</span></span><br><span class="line"><span class="comment">cin&gt;&gt;poly[i].x&gt;&gt;poly[i].y;</span></span><br><span class="line"><span class="comment">cin&gt;&gt;p.x&gt;&gt;p.y;</span></span><br><span class="line"><span class="comment">printf("%c\n", PointInPolygon(p, poly, n) ? 'T' : 'F');</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Polygon Pt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> nxt(x) ((x+1)%n)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PtInPolygon</span><span class="params">(Pt p, Polygon * a, <span class="keyword">int</span> size_a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>, d1, d2, k, n = size_a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (PtOnSegment(p, a[i], a[nxt(i)])) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">k = sgn(det(a[nxt(i)] - a[i], p - a[i]));</span><br><span class="line">d1 = sgn(a[i].y - p.y);</span><br><span class="line">d2 = sgn(a[nxt(i)].y - p.y);</span><br><span class="line"><span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; d1 &lt;= <span class="number">0</span> &amp;&amp; d2 &gt; <span class="number">0</span>) num++;</span><br><span class="line"><span class="keyword">if</span> (k &lt; <span class="number">0</span> &amp;&amp; d2 &lt;= <span class="number">0</span> &amp;&amp; d1 &gt; <span class="number">0</span>) num--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Pt point[max_n];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (scanf_s(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line">Pt  poly[max_n], p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; poly[i].x &gt;&gt; poly[i].y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p.x &gt;&gt; p.y;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, PtInPolygon(p, poly, n) ? <span class="string">'T'</span> : <span class="string">'F'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Computing Geometry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵的幂template</title>
      <link href="/2019/08/02/%E7%9F%A9%E9%98%B5%E7%9A%84%E5%B9%82template/"/>
      <url>/2019/08/02/%E7%9F%A9%E9%98%B5%E7%9A%84%E5%B9%82template/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll mod;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span>&#123;</span></span><br><span class="line">    ll a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    matrix()&#123;&#125;</span><br><span class="line">    matrix(<span class="keyword">int</span> k)&#123;</span><br><span class="line">        n = k;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> matrix &amp;B)&#123;</span><br><span class="line">        <span class="function">matrix <span class="title">C</span><span class="params">(n)</span></span>;</span><br><span class="line">        C.a[<span class="number">0</span>][<span class="number">0</span>] = (a[<span class="number">0</span>][<span class="number">0</span>] * B.a[<span class="number">0</span>][<span class="number">0</span>] % mod + a[<span class="number">0</span>][<span class="number">1</span>] * B.a[<span class="number">1</span>][<span class="number">0</span>] % mod) % mod;</span><br><span class="line">        C.a[<span class="number">0</span>][<span class="number">1</span>] = (a[<span class="number">0</span>][<span class="number">0</span>] * B.a[<span class="number">0</span>][<span class="number">1</span>] % mod + a[<span class="number">0</span>][<span class="number">1</span>] * B.a[<span class="number">1</span>][<span class="number">1</span>] % mod) % mod;</span><br><span class="line">        C.a[<span class="number">1</span>][<span class="number">0</span>] = (a[<span class="number">1</span>][<span class="number">0</span>] * B.a[<span class="number">0</span>][<span class="number">0</span>] % mod + a[<span class="number">1</span>][<span class="number">1</span>] * B.a[<span class="number">1</span>][<span class="number">0</span>] % mod) % mod;</span><br><span class="line">        C.a[<span class="number">1</span>][<span class="number">1</span>] = (a[<span class="number">1</span>][<span class="number">0</span>] * B.a[<span class="number">0</span>][<span class="number">1</span>] % mod + a[<span class="number">1</span>][<span class="number">1</span>] * B.a[<span class="number">1</span>][<span class="number">1</span>] % mod) % mod;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span> ^ (ll k)&#123;</span><br><span class="line">        matrix A = (*<span class="keyword">this</span>), res(n);</span><br><span class="line">        res.init();</span><br><span class="line">        <span class="keyword">while</span>(k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res = res * A;</span><br><span class="line">            A = A * A;</span><br><span class="line">            k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x0,x1,a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;x0,&amp;x1,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%lld"</span>,s,&amp;mod);</span><br><span class="line">    x0 %= mod, x1 %= mod, a %= mod, b %= mod;</span><br><span class="line">    <span class="function">matrix <span class="title">A</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    A.a[<span class="number">0</span>][<span class="number">0</span>] = a, A.a[<span class="number">0</span>][<span class="number">1</span>] = b;</span><br><span class="line">    A.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>, A.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//    for(int i=0;i&lt;1000000;i++) s[i] = rand()%10+'0';</span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="function">matrix <span class="title">res</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    res.init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        res = res * (A ^ (s[n-i<span class="number">-1</span>]-<span class="string">'0'</span>));</span><br><span class="line">        A = A ^ <span class="number">10</span>;<span class="comment">//以十的次方为单位的快速幂</span></span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = (res.a[<span class="number">1</span>][<span class="number">0</span>] * x1 % mod + res.a[<span class="number">1</span>][<span class="number">1</span>] * x0 % mod) % mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Largest Rectangle In a Histigram Plus</title>
      <link href="/2019/07/27/Largest-Rectangle-In-a-Histigram%20plus/"/>
      <url>/2019/07/27/Largest-Rectangle-In-a-Histigram%20plus/</url>
      
        <content type="html"><![CDATA[<p><img src="https://bigboomclap.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/9d74e2c8447938ef046a26300004712c.png" alt></p><p>笛卡尔树：</p><p>​    她的节点的值满足堆得性质，而她节点的下标满足二叉搜索树的性质。</p><p>笛卡尔树的构造：</p><p>（1）从第一个元素开始，从左往右遍历数组L</p><p>（2）将元素L[0]作为树的根节点R</p><p>（3）for i in [a[1], a[2]…a[n]]</p><p>（4）如果a[i]小于根节点R，则将a[i]作为根节点R的父节点</p><p>（5）如果a[i]大于根节点R，则将a[i]从根节点的右节点开始寻找位置</p><p>（6）从右寻找的逻辑同根节点的对比方法</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(i,a) for(int i=1;i&lt;=a;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_n = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> a[max_n],n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> r, l, par;</span><br><span class="line">&#125;tree[max_n];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (!s.empty() &amp;&amp; a[i] &lt; a[s.top()]) &#123;</span><br><span class="line">top = s.top();</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!s.empty()) &#123;</span><br><span class="line">tree[s.top()].r = i;</span><br><span class="line">tree[i].par = s.top();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (top != <span class="number">-1</span>) &#123;</span><br><span class="line">tree[top].par = i;</span><br><span class="line">tree[i].l = top;</span><br><span class="line">&#125;</span><br><span class="line">s.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> root = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">root = s.top();</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">F(i,n)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">int</span> root=build();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"build the tree sccessfully!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">9 3 7 1 8 12 10 20 15 18 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 笛卡尔树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题</title>
      <link href="/2019/07/24/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2019/07/24/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最基础的背包问题：</p><p>思路：从第1个开始往前选</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dp[max_N][max_N];</span><br><span class="line"><span class="keyword">int</span> W, n;</span><br><span class="line"><span class="keyword">int</span> v[max_N], w[max_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= W; i++)</span><br><span class="line">dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = W; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &lt; w[i])</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w[i]] + v[i]);</span><br><span class="line">&#125;背包问题</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[n][W] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; W;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4 5</span></span><br><span class="line"><span class="comment">2 3 1 2 3 4 2 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dynamic programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Largest Rectangle In a Histigram</title>
      <link href="/2019/07/23/Largest-Rectangle-In-a-Histigram/"/>
      <url>/2019/07/23/Largest-Rectangle-In-a-Histigram/</url>
      
        <content type="html"><![CDATA[<p>POJ2559</p><p><strong>思路</strong>：</p><p>符合最大矩形必须满足:</p><p>​            对于左边L：h[i[]&gt;h[i+1]    ,对于右边R:h[i]&gt;h[i+1]</p><p>​            用L[i]记录最大矩形可以到最左边的坐标：</p><p>​            L[i]=(j&lt;=i并且h[j-1]&lt;h的最大的j)            </p><p>​            R[i]=(j&gt;i并且h[j]&gt;h[i]的最小的j)</p><p>​            i从0开始往右，选取的比h[i]大的都为多余的数(就是可以选为最大的矩形的数），可以进行            忽略，只要记录可以到比h[i]大的最左的坐标，用单调栈来寻找选取数的左边离这个数最近的坐标</p><p>​            用R[i]记录最大矩形可以到的最右的坐标：</p><p>​            i从最右开始往左，选取的比h[i]小的都为多余的数(就是可以选为最大的矩形的数），可以进            行忽略，只要记录可以到比h[i]大的最左的坐标，用单调栈来寻找选取数的右边离这个数最近的坐标</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> h[max_N];</span><br><span class="line"><span class="keyword">int</span> L[max_N], R[max_N];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;<span class="comment">//栈的大小</span></span><br><span class="line"><span class="comment">//L:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">while</span> (t &gt; <span class="number">0</span> &amp;&amp; h[i] &lt;= h[sta.top()]) &#123;</span><br><span class="line">sta.pop(); t--;</span><br><span class="line">&#125;</span><br><span class="line">L[i] = (t == <span class="number">0</span>) ? <span class="number">0</span> :sta.top();</span><br><span class="line">sta.push(i); t++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; "L[" &lt;&lt; i &lt;&lt; "]:" &lt;&lt; L[i] &lt;&lt; " ";</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">while</span> (!sta.empty())sta.pop();</span><br><span class="line"><span class="comment">//R:</span></span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">while</span> (t &gt; <span class="number">0</span> &amp;&amp; h[i] &lt;= h[sta.top()]) &#123;</span><br><span class="line">sta.pop(); t--;</span><br><span class="line">&#125;</span><br><span class="line">R[i] = (t == <span class="number">0</span>) ? n : sta.top()<span class="number">-1</span>;</span><br><span class="line"><span class="comment">//-1是求矩形的边长时长度和数值的关系，只能减去右边的，因为可能左边为0，右边为数值</span></span><br><span class="line">sta.push(i); t++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; "R[" &lt;&lt; i &lt;&lt; "]:" &lt;&lt; R[i] &lt;&lt; " ";</span></span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">res = max(res,(ll) h[i] * (R[i] - L[i]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n&amp;&amp;n!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h[i];</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">2 1 4 5 1 3 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客多校round_2 F题</title>
      <link href="/2019/07/21/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1round-2-F%E9%A2%98/"/>
      <url>/2019/07/21/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1round-2-F%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://bigboomclap.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/006mSGrUly1g57j8kxa7cj30q10nj0u8.jpg" alt></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_n = <span class="number">40</span>;</span><br><span class="line">ll val[max_n][max_n];</span><br><span class="line">ll cost = <span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> state,ll cost,<span class="keyword">int</span> pre,<span class="keyword">int</span> got)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (got + got == n) &#123;</span><br><span class="line">ans = max(ans, cost); <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n - pre - <span class="number">1</span> + got &lt; n / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//对于构不成n/2的情况，直接进行剪枝</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> next = pre + <span class="number">1</span>; next &lt; n; next++) &#123;</span><br><span class="line"><span class="comment">//对于每一个next分支，都进行了递归，所以包含了所有情况</span></span><br><span class="line">ll next_cost = cost;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((state &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">next_cost -= val[next][i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_cost += val[next][i];</span><br><span class="line">&#125;</span><br><span class="line">solve(state | (<span class="number">1</span> &lt;&lt; next), next_cost, next, got + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">scanf_s( <span class="string">"%lld"</span>,&amp;val[i][j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">cost += val[<span class="number">0</span>][i];</span><br><span class="line">solve((<span class="number">1</span>&lt;&lt;<span class="number">0</span>), cost, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> brute force </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blocks</title>
      <link href="/2019/07/16/Blocks/"/>
      <url>/2019/07/16/Blocks/</url>
      
        <content type="html"><![CDATA[<p>POJ 3734,又称红色病毒问题</p><p><strong>思路：</strong></p><p>​                假设染色到第i个方块，红绿色都为偶数情况共有$a_i$,红绿色恰有一个为偶数为$b_i$,红绿色都为                奇数情况共有$c_i$</p><p>对于i+1：</p><script type="math/tex; mode=display">a_{i+1}=2*a_i+b_i\\b_{i+1}=2*a_i+b_i+2*c_i\\c_{i+1}=b_i+2*c_i</script><p>矩阵递推式：</p><script type="math/tex; mode=display">\begin{equation}\left[\begin{array}{cccc} a_{i+1}\\ b_{i+1}\\c_{i+1} \end{array}\right ]=\left[\begin{array}{cccc} 2 &1 & 0\\2 &1& 2\\0& 1 &2\end{array}\right ]\left[\begin{array}{cccc} a_i\\ b_i\\ c_i\end{array}\right ]\end{equation}</script><a id="more"></a><p>因此，可以用矩阵的幂快速求解：</p><script type="math/tex; mode=display">\begin{equation}\left[\begin{array}{cccc} a_{i+1}\\ b_{i+1}\\c_{i+1} \end{array}\right ]=\left[\begin{array}{cccc} 2 &1 & 0\\2 &1& 2\\0& 1 &2\end{array}\right ]......\left[\begin{array}{cccc} a_i\\ b_i\\ c_i\end{array}\right ]\end{equation}</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vec vector<span class="meta-string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mat vector<span class="meta-string">&lt;vec&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">10007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">mat <span class="title">mul</span><span class="params">(mat&amp; A,mat&amp; B)</span> </span>&#123;</span><br><span class="line"><span class="function">mat <span class="title">C</span><span class="params">(A.size(), vec(B[<span class="number">0</span>].size()))</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size(); i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; B[<span class="number">0</span>].size(); k++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; B[<span class="number">0</span>].size(); j++)</span><br><span class="line">C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % M;</span><br><span class="line"><span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mat <span class="title">pow</span><span class="params">(mat A, ll n)</span> </span>&#123;</span><br><span class="line"><span class="function">mat <span class="title">B</span><span class="params">(A.size(), vec(A.size()))</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size(); i++)</span><br><span class="line">B[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>)B = mul(B, A);</span><br><span class="line">A = mul(A, A);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">mat <span class="title">A</span><span class="params">(<span class="number">3</span>, vec(<span class="number">3</span>))</span></span>;</span><br><span class="line">A[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span>; A[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>; A[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">A[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">2</span>; A[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span>; A[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">A[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">0</span>; A[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>; A[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">A = <span class="built_in">pow</span>(A, n);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; A[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> round;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; round;</span><br><span class="line"><span class="keyword">while</span> (round--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 矩阵的幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Travel Salesman Problem</title>
      <link href="/2019/07/15/travel-saleman-problem/"/>
      <url>/2019/07/15/travel-saleman-problem/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>思路：</strong></p><p>​        共有（n-1)！路径情况，NP难度问题</p><p>​        假设现在将已经访问过的顶点集合（顶点0当做还未访问）为S，当前所在顶点为v</p><p>​        dp[S][v] = min { dp[S U {u}][u] + d(v,u) | u不属于S}</p><p>​        状态压缩：数组下标为集合，编码一个整数或定义一个全序列关系并用二叉搜索树储存，        方便记忆搜索。对于集合，把每个元素选取与否对应到一个二进制位，从而把状态压缩成一个整数。</p><!--more--><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e9</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_n = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> d[max_n][max_n];<span class="comment">//从v点出发访问剩余所有的点，v-&gt;u(u不属于s)</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1</span> &lt;&lt; max_n][max_n];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="comment">//已经访问过的节点集合为S，当前位置为v</span></span><br><span class="line"><span class="keyword">if</span> (dp[S][v] &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> dp[S][v];</span><br><span class="line"><span class="keyword">if</span> (S == (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span> &amp;&amp; v == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> dp[S][v] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = inf;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(S &gt;&gt; u &amp; <span class="number">1</span>))</span><br><span class="line">            res = min(res, rec(S | <span class="number">1</span> &lt;&lt; u, u) + d[v][u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[S][v] = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_rec</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; rec(<span class="number">0</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_dp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; <span class="number">1</span> &lt;&lt; n; S++)</span><br><span class="line">fill(dp[S], dp[S] + n,inf);</span><br><span class="line">dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> S = (<span class="number">1</span> &lt;&lt; n) - <span class="number">2</span>; S &gt;= <span class="number">0</span>; S--)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++)</span><br><span class="line"><span class="keyword">if</span> (!(S &gt;&gt; u &amp; <span class="number">1</span>))</span><br><span class="line">dp[S][v] = min(dp[S][v], dp[(<span class="number">1</span> &lt;&lt; u) | S][u] + d[v][u]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">6</span>; j++)</span><br><span class="line">d[i][j] =inf;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> from, to, cost;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; from &gt;&gt; to &gt;&gt; cost;</span><br><span class="line">d[from][to] = cost;</span><br><span class="line">&#125;</span><br><span class="line">solve_rec();</span><br><span class="line">    solve_dp();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment">测试数据：</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">0 1 3</span></span><br><span class="line"><span class="comment">1 2 5</span></span><br><span class="line"><span class="comment">2 0 4</span></span><br><span class="line"><span class="comment">2 3 5</span></span><br><span class="line"><span class="comment">3 4 3</span></span><br><span class="line"><span class="comment">4 0 7</span></span><br><span class="line"><span class="comment">0 3 4</span></span><br><span class="line"><span class="comment">4 1 6*/</span></span><br></pre></td></tr></table></figure><p>​        </p>]]></content>
      
      
      
        <tags>
            
            <tag> 状态压缩DP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
