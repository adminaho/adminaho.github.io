<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>牛客多校round_2 F题</title>
      <link href="/2019/07/21/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1round-2-F%E9%A2%98/"/>
      <url>/2019/07/21/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1round-2-F%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006mSGrUly1g57j8kxa7cj30q10nj0u8.jpg" alt></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_n = <span class="number">40</span>;</span><br><span class="line">ll val[max_n][max_n];</span><br><span class="line">ll cost = <span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> state,ll cost,<span class="keyword">int</span> pre,<span class="keyword">int</span> got)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (got + got == n) &#123;</span><br><span class="line">ans = max(ans, cost); <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n - pre - <span class="number">1</span> + got &lt; n / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//对于构不成n/2的情况，直接进行剪枝</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> next = pre + <span class="number">1</span>; next &lt; n; next++) &#123;</span><br><span class="line"><span class="comment">//对于每一个next分支，都进行了递归，所以包含了所有情况</span></span><br><span class="line">ll next_cost = cost;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((state &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">next_cost -= val[next][i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_cost += val[next][i];</span><br><span class="line">&#125;</span><br><span class="line">solve(state | (<span class="number">1</span> &lt;&lt; next), next_cost, next, got + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">scanf_s( <span class="string">"%lld"</span>,&amp;val[i][j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">cost += val[<span class="number">0</span>][i];</span><br><span class="line">solve((<span class="number">1</span>&lt;&lt;<span class="number">0</span>), cost, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> brute force </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blocks</title>
      <link href="/2019/07/16/Blocks/"/>
      <url>/2019/07/16/Blocks/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>POJ 3734,又称红色病毒问题</p><p><strong>思路：</strong></p><p>​                假设染色到第i个方块，红绿色都为偶数情况共有ai,红绿色恰有一个为偶数为bi,红绿色都为奇                数情况共有ci</p><p><img src="http://ww1.sinaimg.cn/large/006mSGrUly1g57jjlt78ej30oz0kmq3k.jpg" alt></p><p>#include<iostream></iostream></p><p>#include<vector></vector></p><p>#define ll long long</p><p>#define inf 1e9</p><p>#define vec vector<int></int></p><p>#define mat vector<vec><br>using namespace std;<br>const int M=10007;</vec></p><p>mat mul(mat&amp; A,mat&amp; B) {<br>    mat C(A.size(), vec(B[0].size()));<br>    for (int i = 0; i &lt; A.size(); i++)<br>        for (int k = 0; k &lt; B[0].size(); k++)<br>            for (int j = 0; j &lt; B[0].size(); j++)<br>                C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % M;<br>    return C;<br>}<br>mat pow(mat A, ll n) {<br>    mat B(A.size(), vec(A.size()));<br>    for (int i = 0; i &lt; A.size(); i++)<br>        B[i][i] = 1;<br>    while (n &gt; 0) {<br>        if (n &amp; 1)B = mul(B, A);<br>        A = mul(A, A);<br>        n &gt;&gt;= 1;<br>    }<br>    return B;<br>}<br>ll n;<br>void solve() {<br>    mat A(3, vec(3));<br>    A[0][0] = 2; A[0][1] = 1; A[0][2] = 0;<br>    A[1][0] = 2; A[1][1] = 2; A[1][2] = 2;<br>    A[2][0] = 0; A[2][1] = 1; A[2][2] = 2;<br>    A = pow(A, n);<br>    cout &lt;&lt; A[0][0] &lt;&lt; endl;<br>}<br>int main() {<br>    int round;<br>    cin &gt;&gt; round;<br>    while (round–)<br>    {<br>        cin &gt;&gt; n;<br>        solve();<br>    }<br>    return 0;<br>}</p>]]></content>
      
      
      
        <tags>
            
            <tag> 矩阵的幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Travel Salesman Problem</title>
      <link href="/2019/07/15/travel-saleman-problem/"/>
      <url>/2019/07/15/travel-saleman-problem/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>思路：</strong></p><p>​        共有（n-1)！路径情况，NP难度问题</p><p>​        假设现在将已经访问过的顶点集合（顶点0当做还未访问）为S，当前所在顶点为v</p><p>​        dp[S][v] = min { dp[S U {u}][u] + d(v,u) | u不属于S}</p><p>​        状态压缩：数组下标为集合，编码一个整数或定义一个全序列关系并用二叉搜索树储存，        方便记忆搜索。对于集合，把每个元素选取与否对应到一个二进制位，从而把状态压缩        成一个整数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e9</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_n = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> d[max_n][max_n];<span class="comment">//从v点出发访问剩余所有的点，v-&gt;u(u不属于s)</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1</span> &lt;&lt; max_n][max_n];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="comment">//已经访问过的节点集合为S，当前位置为v</span></span><br><span class="line"><span class="keyword">if</span> (dp[S][v] &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> dp[S][v];</span><br><span class="line"><span class="keyword">if</span> (S == (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span> &amp;&amp; v == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> dp[S][v] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = inf;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(S &gt;&gt; u &amp; <span class="number">1</span>))</span><br><span class="line">            res = min(res, rec(S | <span class="number">1</span> &lt;&lt; u, u) + d[v][u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[S][v] = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_rec</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; rec(<span class="number">0</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_dp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; <span class="number">1</span> &lt;&lt; n; S++)</span><br><span class="line">fill(dp[S], dp[S] + n,inf);</span><br><span class="line">dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> S = (<span class="number">1</span> &lt;&lt; n) - <span class="number">2</span>; S &gt;= <span class="number">0</span>; S--)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++)</span><br><span class="line"><span class="keyword">if</span> (!(S &gt;&gt; u &amp; <span class="number">1</span>))</span><br><span class="line">dp[S][v] = min(dp[S][v], dp[(<span class="number">1</span> &lt;&lt; u) | S][u] + d[v][u]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">6</span>; j++)</span><br><span class="line">d[i][j] =inf;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> from, to, cost;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; from &gt;&gt; to &gt;&gt; cost;</span><br><span class="line">d[from][to] = cost;</span><br><span class="line">&#125;</span><br><span class="line">solve_rec();</span><br><span class="line">    solve_dp();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment">测试数据：</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">0 1 3</span></span><br><span class="line"><span class="comment">1 2 5</span></span><br><span class="line"><span class="comment">2 0 4</span></span><br><span class="line"><span class="comment">2 3 5</span></span><br><span class="line"><span class="comment">3 4 3</span></span><br><span class="line"><span class="comment">4 0 7</span></span><br><span class="line"><span class="comment">0 3 4</span></span><br><span class="line"><span class="comment">4 1 6*/</span></span><br></pre></td></tr></table></figure><p>​        </p>]]></content>
      
      
      
        <tags>
            
            <tag> 状态压缩DP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
